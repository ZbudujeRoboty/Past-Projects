
Exercise_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f94  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800611c  0800611c  0001611c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006164  08006164  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08006164  08006164  00016164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800616c  0800616c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800616c  0800616c  0001616c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006170  08006170  00016170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000018  0800618c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  0800618c  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016718  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000269d  00000000  00000000  00036760  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001318  00000000  00000000  00038e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e0  00000000  00000000  0003a118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000286c7  00000000  00000000  0003b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f7c5  00000000  00000000  000639bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001032bf  00000000  00000000  00073184  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176443  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005138  00000000  00000000  001764c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006104 	.word	0x08006104

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08006104 	.word	0x08006104

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <InputsHandler_Start>:
uint16_t Adc_Measurements[2];



void InputsHandler_Start(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)Adc_Measurements, 2);
 80004cc:	2202      	movs	r2, #2
 80004ce:	4903      	ldr	r1, [pc, #12]	; (80004dc <InputsHandler_Start+0x14>)
 80004d0:	4803      	ldr	r0, [pc, #12]	; (80004e0 <InputsHandler_Start+0x18>)
 80004d2:	f001 f983 	bl	80017dc <HAL_ADC_Start_DMA>
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	200001c8 	.word	0x200001c8
 80004e0:	20000084 	.word	0x20000084

080004e4 <InputsHandler_Task>:

void InputsHandler_Task(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	static uint8_t button_debouncer;


	  /*Input from IR Sensor*/
	  if(Adc_Measurements[0] < 1000 )
 80004e8:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <InputsHandler_Task+0x80>)
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004f0:	d201      	bcs.n	80004f6 <InputsHandler_Task+0x12>
	  {
		 MotorController_Start();
 80004f2:	f000 f83f 	bl	8000574 <MotorController_Start>
	  }

	  /*Input from Hall Sensor*/
	  if( Adc_Measurements[1] < 1000)
 80004f6:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <InputsHandler_Task+0x80>)
 80004f8:	885b      	ldrh	r3, [r3, #2]
 80004fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004fe:	d201      	bcs.n	8000504 <InputsHandler_Task+0x20>
	  {

		 MotorController_Stop();
 8000500:	f000 f856 	bl	80005b0 <MotorController_Stop>
	  }


	  /*Button pressed connects Pin on the microcontroller with the ground*/
	  if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin) == GPIO_PIN_RESET)
 8000504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000508:	4817      	ldr	r0, [pc, #92]	; (8000568 <InputsHandler_Task+0x84>)
 800050a:	f002 fc99 	bl	8002e40 <HAL_GPIO_ReadPin>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d116      	bne.n	8000542 <InputsHandler_Task+0x5e>
	  {

		  if(button_debouncer<BUTTON_DEBOUNCE_THRESOLD_VALUE)
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <InputsHandler_Task+0x88>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d805      	bhi.n	8000528 <InputsHandler_Task+0x44>
		  {
			  button_debouncer++;
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <InputsHandler_Task+0x88>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <InputsHandler_Task+0x88>)
 8000526:	701a      	strb	r2, [r3, #0]
		  }

		  if(button_debouncer == BUTTON_DEBOUNCE_THRESOLD_VALUE)
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <InputsHandler_Task+0x88>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b03      	cmp	r3, #3
 800052e:	d112      	bne.n	8000556 <InputsHandler_Task+0x72>
		  {
			 button_debouncer++;//Prevention from continous direction switchin, when button is keept
 8000530:	4b0e      	ldr	r3, [pc, #56]	; (800056c <InputsHandler_Task+0x88>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <InputsHandler_Task+0x88>)
 800053a:	701a      	strb	r2, [r3, #0]
			 MotorController_Change_Direction();
 800053c:	f000 f852 	bl	80005e4 <MotorController_Change_Direction>
 8000540:	e009      	b.n	8000556 <InputsHandler_Task+0x72>
		  }
	  }
	  else
	  {
		  if(button_debouncer>0)
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <InputsHandler_Task+0x88>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d005      	beq.n	8000556 <InputsHandler_Task+0x72>
		  {
			  button_debouncer--;
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <InputsHandler_Task+0x88>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	3b01      	subs	r3, #1
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <InputsHandler_Task+0x88>)
 8000554:	701a      	strb	r2, [r3, #0]
		  }

	  }

	/*Trigger Adc Measurement*/
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)Adc_Measurements, 2);
 8000556:	2202      	movs	r2, #2
 8000558:	4902      	ldr	r1, [pc, #8]	; (8000564 <InputsHandler_Task+0x80>)
 800055a:	4805      	ldr	r0, [pc, #20]	; (8000570 <InputsHandler_Task+0x8c>)
 800055c:	f001 f93e 	bl	80017dc <HAL_ADC_Start_DMA>
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200001c8 	.word	0x200001c8
 8000568:	48000800 	.word	0x48000800
 800056c:	20000034 	.word	0x20000034
 8000570:	20000084 	.word	0x20000084

08000574 <MotorController_Start>:
static void MotorController_Set_Driver_Mode(MotorDriverMode_T mode);
static void MotorController_Set_Direction(MotorDriverDirection_T direction);
static void MotorController_Set_PWM(uint16_t duty);

void MotorController_Start(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	if(Driver_State != STARTED)
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <MotorController_Start+0x34>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d010      	beq.n	80005a2 <MotorController_Start+0x2e>
	{
	  MotorController_Set_Driver_Mode(PH_EN_MODE);
 8000580:	2001      	movs	r0, #1
 8000582:	f000 f845 	bl	8000610 <MotorController_Set_Driver_Mode>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000586:	2104      	movs	r1, #4
 8000588:	4808      	ldr	r0, [pc, #32]	; (80005ac <MotorController_Start+0x38>)
 800058a:	f004 f8a5 	bl	80046d8 <HAL_TIM_PWM_Start>
	  MotorController_Set_PWM(500);
 800058e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000592:	f000 f861 	bl	8000658 <MotorController_Set_PWM>
	  MotorController_Set_Direction(LEFT);
 8000596:	2000      	movs	r0, #0
 8000598:	f000 f84c 	bl	8000634 <MotorController_Set_Direction>
	  Driver_State = STARTED;
 800059c:	4b02      	ldr	r3, [pc, #8]	; (80005a8 <MotorController_Start+0x34>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
	}
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000035 	.word	0x20000035
 80005ac:	20000038 	.word	0x20000038

080005b0 <MotorController_Stop>:

void MotorController_Stop(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	if(Driver_State != STOPPED)
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MotorController_Stop+0x2c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d00c      	beq.n	80005d6 <MotorController_Stop+0x26>
	{
	  MotorController_Set_Driver_Mode(PH_EN_MODE);
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 f827 	bl	8000610 <MotorController_Set_Driver_Mode>
	  MotorController_Set_PWM(0);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 f848 	bl	8000658 <MotorController_Set_PWM>
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80005c8:	2104      	movs	r1, #4
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <MotorController_Stop+0x30>)
 80005cc:	f004 f98a 	bl	80048e4 <HAL_TIM_PWM_Stop>
	  Driver_State = STOPPED;
 80005d0:	4b02      	ldr	r3, [pc, #8]	; (80005dc <MotorController_Stop+0x2c>)
 80005d2:	2202      	movs	r2, #2
 80005d4:	701a      	strb	r2, [r3, #0]
	}
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000035 	.word	0x20000035
 80005e0:	20000038 	.word	0x20000038

080005e4 <MotorController_Change_Direction>:

void MotorController_Change_Direction(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	static MotorDriverDirection_T direction = LEFT;

	if(direction==LEFT)
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <MotorController_Change_Direction+0x28>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d103      	bne.n	80005f8 <MotorController_Change_Direction+0x14>
	{
		direction = RIGHT;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MotorController_Change_Direction+0x28>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	e002      	b.n	80005fe <MotorController_Change_Direction+0x1a>
	}
	else
	{
		direction = LEFT;
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <MotorController_Change_Direction+0x28>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	MotorController_Set_Direction(direction);
 80005fe:	4b03      	ldr	r3, [pc, #12]	; (800060c <MotorController_Change_Direction+0x28>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f816 	bl	8000634 <MotorController_Set_Direction>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000036 	.word	0x20000036

08000610 <MotorController_Set_Driver_Mode>:


static void MotorController_Set_Driver_Mode(MotorDriverMode_T mode)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, (GPIO_PinState)mode);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	461a      	mov	r2, r3
 800061e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000622:	4803      	ldr	r0, [pc, #12]	; (8000630 <MotorController_Set_Driver_Mode+0x20>)
 8000624:	f002 fc24 	bl	8002e70 <HAL_GPIO_WritePin>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	48000400 	.word	0x48000400

08000634 <MotorController_Set_Direction>:

static void MotorController_Set_Direction(MotorDriverDirection_T direction)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PHASE_GPIO_Port, PHASE_Pin, (GPIO_PinState) direction);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	461a      	mov	r2, r3
 8000642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064a:	f002 fc11 	bl	8002e70 <HAL_GPIO_WritePin>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <MotorController_Set_PWM>:

static void MotorController_Set_PWM(uint16_t duty)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
	if(duty > 999)
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000668:	d302      	bcc.n	8000670 <MotorController_Set_PWM+0x18>
	{
		duty = 999;
 800066a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800066e:	80fb      	strh	r3, [r7, #6]
	}
	htim3.Instance->CCR2 = duty;
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <MotorController_Set_PWM+0x2c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	88fa      	ldrh	r2, [r7, #6]
 8000676:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	20000038 	.word	0x20000038

08000688 <TaskScheduler_Start>:
uint16_t Tasks_elapsed_times[NUMBER_OF_TASKS];
uint16_t TaskSchedulerTick;

/*Function starts Task Scheduler module*/
void TaskScheduler_Start(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	 HAL_TIM_Base_Start_IT(&htim2);
 800068c:	4802      	ldr	r0, [pc, #8]	; (8000698 <TaskScheduler_Start+0x10>)
 800068e:	f003 ff05 	bl	800449c <HAL_TIM_Base_Start_IT>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000017c 	.word	0x2000017c

0800069c <TaskScheduler_Tick>:


/*Function shall be called when SysTick should be incremented*/
void TaskScheduler_Tick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	TaskSchedulerTick++;
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <TaskScheduler_Tick+0x1c>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <TaskScheduler_Tick+0x1c>)
 80006aa:	801a      	strh	r2, [r3, #0]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	2000024c 	.word	0x2000024c

080006bc <TaskScheduler_Run>:

/*Function shall be called in main function. It runs tasks in proper order with predefined period*/
void TaskScheduler_Run(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
	static uint16_t prev_TaskSchedulerTick=0xFFFFU;

	if( TaskSchedulerTick != prev_TaskSchedulerTick )
 80006c2:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <TaskScheduler_Run+0x84>)
 80006c4:	881a      	ldrh	r2, [r3, #0]
 80006c6:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <TaskScheduler_Run+0x88>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d033      	beq.n	8000736 <TaskScheduler_Run+0x7a>
	{
		/*Increment elapsed times for all tasks*/
		for (uint8_t cntr = 0; cntr < NUMBER_OF_TASKS; cntr++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	71fb      	strb	r3, [r7, #7]
 80006d2:	e00b      	b.n	80006ec <TaskScheduler_Run+0x30>
		{
			Tasks_elapsed_times[cntr]++;
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <TaskScheduler_Run+0x8c>)
 80006d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006dc:	3201      	adds	r2, #1
 80006de:	b291      	uxth	r1, r2
 80006e0:	4a19      	ldr	r2, [pc, #100]	; (8000748 <TaskScheduler_Run+0x8c>)
 80006e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t cntr = 0; cntr < NUMBER_OF_TASKS; cntr++)
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	3301      	adds	r3, #1
 80006ea:	71fb      	strb	r3, [r7, #7]
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f0      	beq.n	80006d4 <TaskScheduler_Run+0x18>
		}

		/*Call tasks*/
		for (uint8_t cntr = 0; cntr < NUMBER_OF_TASKS; cntr++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	71bb      	strb	r3, [r7, #6]
 80006f6:	e017      	b.n	8000728 <TaskScheduler_Run+0x6c>
		{
			if(Tasks_elapsed_times[cntr] == Tasks_table[cntr].period )
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	4a13      	ldr	r2, [pc, #76]	; (8000748 <TaskScheduler_Run+0x8c>)
 80006fc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	4912      	ldr	r1, [pc, #72]	; (800074c <TaskScheduler_Run+0x90>)
 8000704:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8000708:	429a      	cmp	r2, r3
 800070a:	d10a      	bne.n	8000722 <TaskScheduler_Run+0x66>
			{
				Tasks_table[cntr].TaskHandler();
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	4a0f      	ldr	r2, [pc, #60]	; (800074c <TaskScheduler_Run+0x90>)
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	4413      	add	r3, r2
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	4798      	blx	r3
				Tasks_elapsed_times[cntr]= 0;
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <TaskScheduler_Run+0x8c>)
 800071c:	2100      	movs	r1, #0
 800071e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t cntr = 0; cntr < NUMBER_OF_TASKS; cntr++)
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	3301      	adds	r3, #1
 8000726:	71bb      	strb	r3, [r7, #6]
 8000728:	79bb      	ldrb	r3, [r7, #6]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d0e4      	beq.n	80006f8 <TaskScheduler_Run+0x3c>
			}
		}

		prev_TaskSchedulerTick = TaskSchedulerTick;
 800072e:	4b04      	ldr	r3, [pc, #16]	; (8000740 <TaskScheduler_Run+0x84>)
 8000730:	881a      	ldrh	r2, [r3, #0]
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <TaskScheduler_Run+0x88>)
 8000734:	801a      	strh	r2, [r3, #0]
	else
	{
		/*Idle*/
	}

}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000024c 	.word	0x2000024c
 8000744:	20000008 	.word	0x20000008
 8000748:	20000250 	.word	0x20000250
 800074c:	20000000 	.word	0x20000000

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000754:	f000 fc9c 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000758:	f000 f813 	bl	8000782 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075c:	f000 fa1e 	bl	8000b9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000760:	f000 f9fe 	bl	8000b60 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000764:	f000 f9cc 	bl	8000b00 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000768:	f000 f91a 	bl	80009a0 <MX_TIM2_Init>
  MX_ADC1_Init();
 800076c:	f000 f892 	bl	8000894 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000770:	f000 f96c 	bl	8000a4c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  TaskScheduler_Start();
 8000774:	f7ff ff88 	bl	8000688 <TaskScheduler_Start>
  InputsHandler_Start();
 8000778:	f7ff fea6 	bl	80004c8 <InputsHandler_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TaskScheduler_Run();
 800077c:	f7ff ff9e 	bl	80006bc <TaskScheduler_Run>
  {
 8000780:	e7fc      	b.n	800077c <main+0x2c>

08000782 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b0b8      	sub	sp, #224	; 0xe0
 8000786:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000788:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800078c:	2244      	movs	r2, #68	; 0x44
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f005 fcaf 	bl	80060f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000796:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a6:	463b      	mov	r3, r7
 80007a8:	2288      	movs	r2, #136	; 0x88
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f005 fca1 	bl	80060f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b2:	2302      	movs	r3, #2
 80007b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c0:	2310      	movs	r3, #16
 80007c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007cc:	2302      	movs	r3, #2
 80007ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007d8:	230a      	movs	r3, #10
 80007da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007de:	2307      	movs	r3, #7
 80007e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fbb7 	bl	8002f68 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000800:	f000 fa4a 	bl	8000c98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	2303      	movs	r3, #3
 800080c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000822:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000826:	2104      	movs	r1, #4
 8000828:	4618      	mov	r0, r3
 800082a:	f002 ff83 	bl	8003734 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000834:	f000 fa30 	bl	8000c98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000838:	f244 0302 	movw	r3, #16386	; 0x4002
 800083c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800083e:	2300      	movs	r3, #0
 8000840:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000842:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000846:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000848:	2302      	movs	r3, #2
 800084a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800084c:	2301      	movs	r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000850:	2308      	movs	r3, #8
 8000852:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000854:	2307      	movs	r3, #7
 8000856:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000858:	2302      	movs	r3, #2
 800085a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800085c:	2302      	movs	r3, #2
 800085e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000864:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	4618      	mov	r0, r3
 800086a:	f003 f967 	bl	8003b3c <HAL_RCCEx_PeriphCLKConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000874:	f000 fa10 	bl	8000c98 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000878:	f44f 7000 	mov.w	r0, #512	; 0x200
 800087c:	f002 fb1e 	bl	8002ebc <HAL_PWREx_ControlVoltageScaling>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000886:	f000 fa07 	bl	8000c98 <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	37e0      	adds	r7, #224	; 0xe0
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
 80008b4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80008b6:	4b36      	ldr	r3, [pc, #216]	; (8000990 <MX_ADC1_Init+0xfc>)
 80008b8:	4a36      	ldr	r2, [pc, #216]	; (8000994 <MX_ADC1_Init+0x100>)
 80008ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008bc:	4b34      	ldr	r3, [pc, #208]	; (8000990 <MX_ADC1_Init+0xfc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008c2:	4b33      	ldr	r3, [pc, #204]	; (8000990 <MX_ADC1_Init+0xfc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c8:	4b31      	ldr	r3, [pc, #196]	; (8000990 <MX_ADC1_Init+0xfc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008ce:	4b30      	ldr	r3, [pc, #192]	; (8000990 <MX_ADC1_Init+0xfc>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d4:	4b2e      	ldr	r3, [pc, #184]	; (8000990 <MX_ADC1_Init+0xfc>)
 80008d6:	2204      	movs	r2, #4
 80008d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <MX_ADC1_Init+0xfc>)
 80008dc:	2200      	movs	r2, #0
 80008de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008e0:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <MX_ADC1_Init+0xfc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <MX_ADC1_Init+0xfc>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ec:	4b28      	ldr	r3, [pc, #160]	; (8000990 <MX_ADC1_Init+0xfc>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f4:	4b26      	ldr	r3, [pc, #152]	; (8000990 <MX_ADC1_Init+0xfc>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fa:	4b25      	ldr	r3, [pc, #148]	; (8000990 <MX_ADC1_Init+0xfc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <MX_ADC1_Init+0xfc>)
 8000902:	2200      	movs	r2, #0
 8000904:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000908:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_ADC1_Init+0xfc>)
 800090a:	2200      	movs	r2, #0
 800090c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <MX_ADC1_Init+0xfc>)
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000916:	481e      	ldr	r0, [pc, #120]	; (8000990 <MX_ADC1_Init+0xfc>)
 8000918:	f000 fe0c 	bl	8001534 <HAL_ADC_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000922:	f000 f9b9 	bl	8000c98 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4817      	ldr	r0, [pc, #92]	; (8000990 <MX_ADC1_Init+0xfc>)
 8000932:	f001 fd27 	bl	8002384 <HAL_ADCEx_MultiModeConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800093c:	f000 f9ac 	bl	8000c98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_ADC1_Init+0x104>)
 8000942:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000944:	2306      	movs	r3, #6
 8000946:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000948:	2302      	movs	r3, #2
 800094a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800094c:	237f      	movs	r3, #127	; 0x7f
 800094e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000950:	2304      	movs	r3, #4
 8000952:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <MX_ADC1_Init+0xfc>)
 800095e:	f001 f80f 	bl	8001980 <HAL_ADC_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000968:	f000 f996 	bl	8000c98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_ADC1_Init+0x108>)
 800096e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000970:	230c      	movs	r3, #12
 8000972:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_ADC1_Init+0xfc>)
 800097a:	f001 f801 	bl	8001980 <HAL_ADC_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000984:	f000 f988 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	3728      	adds	r7, #40	; 0x28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000084 	.word	0x20000084
 8000994:	50040000 	.word	0x50040000
 8000998:	14f00020 	.word	0x14f00020
 800099c:	19200040 	.word	0x19200040

080009a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b2:	463b      	mov	r3, r7
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
 80009c0:	615a      	str	r2, [r3, #20]
 80009c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <MX_TIM2_Init+0xa8>)
 80009c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_TIM2_Init+0xa8>)
 80009ce:	224f      	movs	r2, #79	; 0x4f
 80009d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d2:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_TIM2_Init+0xa8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_TIM2_Init+0xa8>)
 80009da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_TIM2_Init+0xa8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_TIM2_Init+0xa8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80009ec:	4816      	ldr	r0, [pc, #88]	; (8000a48 <MX_TIM2_Init+0xa8>)
 80009ee:	f003 fdc5 	bl	800457c <HAL_TIM_OC_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80009f8:	f000 f94e 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480f      	ldr	r0, [pc, #60]	; (8000a48 <MX_TIM2_Init+0xa8>)
 8000a0c:	f004 fe6e 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000a16:	f000 f93f 	bl	8000c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_TIM2_Init+0xa8>)
 8000a32:	f004 f90d 	bl	8004c50 <HAL_TIM_OC_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000a3c:	f000 f92c 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2000017c 	.word	0x2000017c

08000a4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5e:	463b      	mov	r3, r7
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
 8000a6c:	615a      	str	r2, [r3, #20]
 8000a6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_TIM3_Init+0xac>)
 8000a72:	4a22      	ldr	r2, [pc, #136]	; (8000afc <MX_TIM3_Init+0xb0>)
 8000a74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 8000a76:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <MX_TIM3_Init+0xac>)
 8000a78:	2203      	movs	r2, #3
 8000a7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <MX_TIM3_Init+0xac>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_TIM3_Init+0xac>)
 8000a84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_TIM3_Init+0xac>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_TIM3_Init+0xac>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a96:	4818      	ldr	r0, [pc, #96]	; (8000af8 <MX_TIM3_Init+0xac>)
 8000a98:	f003 fdc7 	bl	800462a <HAL_TIM_PWM_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000aa2:	f000 f8f9 	bl	8000c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4810      	ldr	r0, [pc, #64]	; (8000af8 <MX_TIM3_Init+0xac>)
 8000ab6:	f004 fe19 	bl	80056ec <HAL_TIMEx_MasterConfigSynchronization>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000ac0:	f000 f8ea 	bl	8000c98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac4:	2360      	movs	r3, #96	; 0x60
 8000ac6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <MX_TIM3_Init+0xac>)
 8000adc:	f004 f92e 	bl	8004d3c <HAL_TIM_PWM_ConfigChannel>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ae6:	f000 f8d7 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aea:	4803      	ldr	r0, [pc, #12]	; (8000af8 <MX_TIM3_Init+0xac>)
 8000aec:	f000 f9b2 	bl	8000e54 <HAL_TIM_MspPostInit>

}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000038 	.word	0x20000038
 8000afc:	40000400 	.word	0x40000400

08000b00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b06:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <MX_USART2_UART_Init+0x5c>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART2_UART_Init+0x58>)
 8000b44:	f004 fe78 	bl	8005838 <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b4e:	f000 f8a3 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200001cc 	.word	0x200001cc
 8000b5c:	40004400 	.word	0x40004400

08000b60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_DMA_Init+0x38>)
 8000b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <MX_DMA_Init+0x38>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6493      	str	r3, [r2, #72]	; 0x48
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_DMA_Init+0x38>)
 8000b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	200b      	movs	r0, #11
 8000b84:	f001 fd85 	bl	8002692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b88:	200b      	movs	r0, #11
 8000b8a:	f001 fd9e 	bl	80026ca <HAL_NVIC_EnableIRQ>

}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	4a35      	ldr	r2, [pc, #212]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbe:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	4a2f      	ldr	r2, [pc, #188]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	4a29      	ldr	r2, [pc, #164]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bee:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	4a23      	ldr	r2, [pc, #140]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PHASE_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f002 f928 	bl	8002e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c26:	481a      	ldr	r0, [pc, #104]	; (8000c90 <MX_GPIO_Init+0xf4>)
 8000c28:	f002 f922 	bl	8002e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4814      	ldr	r0, [pc, #80]	; (8000c94 <MX_GPIO_Init+0xf8>)
 8000c42:	f001 ff55 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PHASE_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PHASE_Pin;
 8000c46:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c62:	f001 ff45 	bl	8002af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_Pin */
  GPIO_InitStruct.Pin = MODE_Pin;
 8000c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4804      	ldr	r0, [pc, #16]	; (8000c90 <MX_GPIO_Init+0xf4>)
 8000c80:	f001 ff36 	bl	8002af0 <HAL_GPIO_Init>

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	48000400 	.word	0x48000400
 8000c94:	48000800 	.word	0x48000800

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_MspInit+0x44>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <HAL_MspInit+0x44>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_MspInit+0x44>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_MspInit+0x44>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_MspInit+0x44>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_MspInit+0x44>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a2b      	ldr	r2, [pc, #172]	; (8000dbc <HAL_ADC_MspInit+0xcc>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d14f      	bne.n	8000db2 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d12:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <HAL_ADC_MspInit+0xd0>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	4a2a      	ldr	r2, [pc, #168]	; (8000dc0 <HAL_ADC_MspInit+0xd0>)
 8000d18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1e:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <HAL_ADC_MspInit+0xd0>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <HAL_ADC_MspInit+0xd0>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	4a24      	ldr	r2, [pc, #144]	; (8000dc0 <HAL_ADC_MspInit+0xd0>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <HAL_ADC_MspInit+0xd0>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d42:	2303      	movs	r3, #3
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d46:	230b      	movs	r3, #11
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d58:	f001 feca 	bl	8002af0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_ADC_MspInit+0xd4>)
 8000d5e:	4a1a      	ldr	r2, [pc, #104]	; (8000dc8 <HAL_ADC_MspInit+0xd8>)
 8000d60:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <HAL_ADC_MspInit+0xd4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_ADC_MspInit+0xd4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_ADC_MspInit+0xd4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <HAL_ADC_MspInit+0xd4>)
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_ADC_MspInit+0xd4>)
 8000d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_ADC_MspInit+0xd4>)
 8000d84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d88:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_ADC_MspInit+0xd4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_ADC_MspInit+0xd4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d96:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <HAL_ADC_MspInit+0xd4>)
 8000d98:	f001 fcb2 	bl	8002700 <HAL_DMA_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000da2:	f7ff ff79 	bl	8000c98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <HAL_ADC_MspInit+0xd4>)
 8000daa:	64da      	str	r2, [r3, #76]	; 0x4c
 8000dac:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <HAL_ADC_MspInit+0xd4>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	50040000 	.word	0x50040000
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	200000e8 	.word	0x200000e8
 8000dc8:	40020008 	.word	0x40020008

08000dcc <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ddc:	d113      	bne.n	8000e06 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_TIM_OC_MspInit+0x44>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <HAL_TIM_OC_MspInit+0x44>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_TIM_OC_MspInit+0x44>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	201c      	movs	r0, #28
 8000dfc:	f001 fc49 	bl	8002692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e00:	201c      	movs	r0, #28
 8000e02:	f001 fc62 	bl	80026ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_TIM_PWM_MspInit+0x38>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d10b      	bne.n	8000e3e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	6593      	str	r3, [r2, #88]	; 0x58
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	40000400 	.word	0x40000400
 8000e50:	40021000 	.word	0x40021000

08000e54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <HAL_TIM_MspPostInit+0x64>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d11b      	bne.n	8000eae <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_TIM_MspPostInit+0x68>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <HAL_TIM_MspPostInit+0x68>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_TIM_MspPostInit+0x68>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_PWM_Pin;
 8000e8e:	2320      	movs	r3, #32
 8000e90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_TIM_MspPostInit+0x6c>)
 8000eaa:	f001 fe21 	bl	8002af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3720      	adds	r7, #32
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40000400 	.word	0x40000400
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	48000400 	.word	0x48000400

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <HAL_UART_MspInit+0x7c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d128      	bne.n	8000f38 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f16:	230c      	movs	r3, #12
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f26:	2307      	movs	r3, #7
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f34:	f001 fddc 	bl	8002af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	; 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40004400 	.word	0x40004400
 8000f44:	40021000 	.word	0x40021000

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <MemManage_Handler+0x4>

08000f62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9c:	f000 f8d4 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <DMA1_Channel1_IRQHandler+0x10>)
 8000faa:	f001 fcc1 	bl	8002930 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000e8 	.word	0x200000e8

08000fb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <TIM2_IRQHandler+0x14>)
 8000fbe:	f003 fd27 	bl	8004a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  TaskScheduler_Tick();
 8000fc2:	f7ff fb6b 	bl	800069c <TaskScheduler_Tick>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000017c 	.word	0x2000017c

08000fd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <SystemInit+0x64>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fda:	4a16      	ldr	r2, [pc, #88]	; (8001034 <SystemInit+0x64>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <SystemInit+0x68>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a13      	ldr	r2, [pc, #76]	; (8001038 <SystemInit+0x68>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <SystemInit+0x68>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <SystemInit+0x68>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	; (8001038 <SystemInit+0x68>)
 8000ffc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001000:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001004:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <SystemInit+0x68>)
 8001008:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800100c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <SystemInit+0x68>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a09      	ldr	r2, [pc, #36]	; (8001038 <SystemInit+0x68>)
 8001014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001018:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <SystemInit+0x68>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <SystemInit+0x64>)
 8001022:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001026:	609a      	str	r2, [r3, #8]
#endif
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00
 8001038:	40021000 	.word	0x40021000

0800103c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001074 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001040:	f7ff ffc6 	bl	8000fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001044:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001046:	e003      	b.n	8001050 <LoopCopyDataInit>

08001048 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800104a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800104c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800104e:	3104      	adds	r1, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001054:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001056:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001058:	d3f6      	bcc.n	8001048 <CopyDataInit>
	ldr	r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <LoopForever+0x12>)
	b	LoopFillZerobss
 800105c:	e002      	b.n	8001064 <LoopFillZerobss>

0800105e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800105e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001060:	f842 3b04 	str.w	r3, [r2], #4

08001064 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <LoopForever+0x16>)
	cmp	r2, r3
 8001066:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001068:	d3f9      	bcc.n	800105e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106a:	f005 f81f 	bl	80060ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800106e:	f7ff fb6f 	bl	8000750 <main>

08001072 <LoopForever>:

LoopForever:
    b LoopForever
 8001072:	e7fe      	b.n	8001072 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001074:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001078:	08006174 	.word	0x08006174
	ldr	r0, =_sdata
 800107c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001080:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8001084:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8001088:	20000258 	.word	0x20000258

0800108c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_2_IRQHandler>
	...

08001090 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_Init+0x3c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <HAL_Init+0x3c>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a6:	2003      	movs	r0, #3
 80010a8:	f001 fae8 	bl	800267c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ac:	2000      	movs	r0, #0
 80010ae:	f000 f80f 	bl	80010d0 <HAL_InitTick>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	e001      	b.n	80010c2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010be:	f7ff fdf3 	bl	8000ca8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40022000 	.word	0x40022000

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_InitTick+0x6c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d023      	beq.n	800112c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <HAL_InitTick+0x70>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <HAL_InitTick+0x6c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 faf3 	bl	80026e6 <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10f      	bne.n	8001126 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d809      	bhi.n	8001120 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f001 fabd 	bl	8002692 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <HAL_InitTick+0x74>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e007      	b.n	8001130 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e004      	b.n	8001130 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	e001      	b.n	8001130 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000014 	.word	0x20000014
 8001140:	2000000c 	.word	0x2000000c
 8001144:	20000010 	.word	0x20000010

08001148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x20>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x24>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_IncTick+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000014 	.word	0x20000014
 800116c:	20000254 	.word	0x20000254

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000254 	.word	0x20000254

08001188 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	431a      	orrs	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	609a      	str	r2, [r3, #8]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	609a      	str	r2, [r3, #8]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	3360      	adds	r3, #96	; 0x60
 8001202:	461a      	mov	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <LL_ADC_SetOffset+0x44>)
 8001212:	4013      	ands	r3, r2
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	430a      	orrs	r2, r1
 800121e:	4313      	orrs	r3, r2
 8001220:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001228:	bf00      	nop
 800122a:	371c      	adds	r7, #28
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	03fff000 	.word	0x03fff000

08001238 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3360      	adds	r3, #96	; 0x60
 8001246:	461a      	mov	r2, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001264:	b480      	push	{r7}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	3360      	adds	r3, #96	; 0x60
 8001274:	461a      	mov	r2, r3
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	431a      	orrs	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3330      	adds	r3, #48	; 0x30
 80012d0:	461a      	mov	r2, r3
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	4413      	add	r3, r2
 80012de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	211f      	movs	r1, #31
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	401a      	ands	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	0e9b      	lsrs	r3, r3, #26
 80012f8:	f003 011f 	and.w	r1, r3, #31
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	431a      	orrs	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800130c:	bf00      	nop
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3314      	adds	r3, #20
 8001328:	461a      	mov	r2, r3
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	0e5b      	lsrs	r3, r3, #25
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	4413      	add	r3, r2
 8001336:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	0d1b      	lsrs	r3, r3, #20
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	2107      	movs	r1, #7
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	401a      	ands	r2, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	0d1b      	lsrs	r3, r3, #20
 8001352:	f003 031f 	and.w	r3, r3, #31
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	431a      	orrs	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001362:	bf00      	nop
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001388:	43db      	mvns	r3, r3
 800138a:	401a      	ands	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0318 	and.w	r3, r3, #24
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001394:	40d9      	lsrs	r1, r3
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	400b      	ands	r3, r1
 800139a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800139e:	431a      	orrs	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	0007ffff 	.word	0x0007ffff

080013b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 031f 	and.w	r3, r3, #31
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6093      	str	r3, [r2, #8]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800140c:	d101      	bne.n	8001412 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001434:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800145c:	d101      	bne.n	8001462 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001480:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001484:	f043 0201 	orr.w	r2, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <LL_ADC_IsEnabled+0x18>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <LL_ADC_IsEnabled+0x1a>
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014d2:	f043 0204 	orr.w	r2, r3, #4
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d101      	bne.n	80014fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b08      	cmp	r3, #8
 800151e:	d101      	bne.n	8001524 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e134      	b.n	80017b8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001558:	2b00      	cmp	r3, #0
 800155a:	d109      	bne.n	8001570 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fbc7 	bl	8000cf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff3f 	bl	80013f8 <LL_ADC_IsDeepPowerDownEnabled>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d004      	beq.n	800158a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff25 	bl	80013d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff5a 	bl	8001448 <LL_ADC_IsInternalRegulatorEnabled>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d113      	bne.n	80015c2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ff3e 	bl	8001420 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80015a4:	4b86      	ldr	r3, [pc, #536]	; (80017c0 <HAL_ADC_Init+0x28c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	099b      	lsrs	r3, r3, #6
 80015aa:	4a86      	ldr	r2, [pc, #536]	; (80017c4 <HAL_ADC_Init+0x290>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	099b      	lsrs	r3, r3, #6
 80015b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015b4:	e002      	b.n	80015bc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f9      	bne.n	80015b6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ff3e 	bl	8001448 <LL_ADC_IsInternalRegulatorEnabled>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10d      	bne.n	80015ee <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d6:	f043 0210 	orr.w	r2, r3, #16
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e2:	f043 0201 	orr.w	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff77 	bl	80014e6 <LL_ADC_REG_IsConversionOngoing>
 80015f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	2b00      	cmp	r3, #0
 8001604:	f040 80cf 	bne.w	80017a6 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f040 80cb 	bne.w	80017a6 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001614:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001618:	f043 0202 	orr.w	r2, r3, #2
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff37 	bl	8001498 <LL_ADC_IsEnabled>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d115      	bne.n	800165c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001630:	4865      	ldr	r0, [pc, #404]	; (80017c8 <HAL_ADC_Init+0x294>)
 8001632:	f7ff ff31 	bl	8001498 <LL_ADC_IsEnabled>
 8001636:	4604      	mov	r4, r0
 8001638:	4864      	ldr	r0, [pc, #400]	; (80017cc <HAL_ADC_Init+0x298>)
 800163a:	f7ff ff2d 	bl	8001498 <LL_ADC_IsEnabled>
 800163e:	4603      	mov	r3, r0
 8001640:	431c      	orrs	r4, r3
 8001642:	4863      	ldr	r0, [pc, #396]	; (80017d0 <HAL_ADC_Init+0x29c>)
 8001644:	f7ff ff28 	bl	8001498 <LL_ADC_IsEnabled>
 8001648:	4603      	mov	r3, r0
 800164a:	4323      	orrs	r3, r4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d105      	bne.n	800165c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4619      	mov	r1, r3
 8001656:	485f      	ldr	r0, [pc, #380]	; (80017d4 <HAL_ADC_Init+0x2a0>)
 8001658:	f7ff fd96 	bl	8001188 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7e5b      	ldrb	r3, [r3, #25]
 8001660:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001666:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800166c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001672:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d106      	bne.n	8001698 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	3b01      	subs	r3, #1
 8001690:	045b      	lsls	r3, r3, #17
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	2b00      	cmp	r3, #0
 800169e:	d009      	beq.n	80016b4 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <HAL_ADC_Init+0x2a4>)
 80016bc:	4013      	ands	r3, r2
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	69b9      	ldr	r1, [r7, #24]
 80016c4:	430b      	orrs	r3, r1
 80016c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff0a 	bl	80014e6 <LL_ADC_REG_IsConversionOngoing>
 80016d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff17 	bl	800150c <LL_ADC_INJ_IsConversionOngoing>
 80016de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d13d      	bne.n	8001762 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d13a      	bne.n	8001762 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016f8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001708:	f023 0302 	bic.w	r3, r3, #2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	69b9      	ldr	r1, [r7, #24]
 8001712:	430b      	orrs	r3, r1
 8001714:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800171c:	2b01      	cmp	r3, #1
 800171e:	d118      	bne.n	8001752 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800172a:	f023 0304 	bic.w	r3, r3, #4
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001736:	4311      	orrs	r1, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800173c:	4311      	orrs	r1, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001742:	430a      	orrs	r2, r1
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0201 	orr.w	r2, r2, #1
 800174e:	611a      	str	r2, [r3, #16]
 8001750:	e007      	b.n	8001762 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0201 	bic.w	r2, r2, #1
 8001760:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d10c      	bne.n	8001784 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	f023 010f 	bic.w	r1, r3, #15
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	1e5a      	subs	r2, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	631a      	str	r2, [r3, #48]	; 0x30
 8001782:	e007      	b.n	8001794 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 020f 	bic.w	r2, r2, #15
 8001792:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001798:	f023 0303 	bic.w	r3, r3, #3
 800179c:	f043 0201 	orr.w	r2, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	655a      	str	r2, [r3, #84]	; 0x54
 80017a4:	e007      	b.n	80017b6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017aa:	f043 0210 	orr.w	r2, r3, #16
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3724      	adds	r7, #36	; 0x24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd90      	pop	{r4, r7, pc}
 80017c0:	2000000c 	.word	0x2000000c
 80017c4:	053e2d63 	.word	0x053e2d63
 80017c8:	50040000 	.word	0x50040000
 80017cc:	50040100 	.word	0x50040100
 80017d0:	50040200 	.word	0x50040200
 80017d4:	50040300 	.word	0x50040300
 80017d8:	fff0c007 	.word	0xfff0c007

080017dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017e8:	4850      	ldr	r0, [pc, #320]	; (800192c <HAL_ADC_Start_DMA+0x150>)
 80017ea:	f7ff fde5 	bl	80013b8 <LL_ADC_GetMultimode>
 80017ee:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fe76 	bl	80014e6 <LL_ADC_REG_IsConversionOngoing>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f040 808e 	bne.w	800191e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_ADC_Start_DMA+0x34>
 800180c:	2302      	movs	r3, #2
 800180e:	e089      	b.n	8001924 <HAL_ADC_Start_DMA+0x148>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	2b05      	cmp	r3, #5
 8001822:	d002      	beq.n	800182a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	2b09      	cmp	r3, #9
 8001828:	d172      	bne.n	8001910 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 fc96 	bl	800215c <ADC_Enable>
 8001830:	4603      	mov	r3, r0
 8001832:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d165      	bne.n	8001906 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a37      	ldr	r2, [pc, #220]	; (8001930 <HAL_ADC_Start_DMA+0x154>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d002      	beq.n	800185e <HAL_ADC_Start_DMA+0x82>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	e000      	b.n	8001860 <HAL_ADC_Start_DMA+0x84>
 800185e:	4b35      	ldr	r3, [pc, #212]	; (8001934 <HAL_ADC_Start_DMA+0x158>)
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	4293      	cmp	r3, r2
 8001866:	d002      	beq.n	800186e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d105      	bne.n	800187a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001872:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d006      	beq.n	8001894 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188a:	f023 0206 	bic.w	r2, r3, #6
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	659a      	str	r2, [r3, #88]	; 0x58
 8001892:	e002      	b.n	800189a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	4a26      	ldr	r2, [pc, #152]	; (8001938 <HAL_ADC_Start_DMA+0x15c>)
 80018a0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	4a25      	ldr	r2, [pc, #148]	; (800193c <HAL_ADC_Start_DMA+0x160>)
 80018a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	4a24      	ldr	r2, [pc, #144]	; (8001940 <HAL_ADC_Start_DMA+0x164>)
 80018b0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	221c      	movs	r2, #28
 80018b8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f042 0210 	orr.w	r2, r2, #16
 80018d0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f042 0201 	orr.w	r2, r2, #1
 80018e0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3340      	adds	r3, #64	; 0x40
 80018ec:	4619      	mov	r1, r3
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f000 ffbd 	bl	8002870 <HAL_DMA_Start_IT>
 80018f6:	4603      	mov	r3, r0
 80018f8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fddd 	bl	80014be <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001904:	e00d      	b.n	8001922 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800190e:	e008      	b.n	8001922 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800191c:	e001      	b.n	8001922 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800191e:	2302      	movs	r3, #2
 8001920:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001922:	7dfb      	ldrb	r3, [r7, #23]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	50040300 	.word	0x50040300
 8001930:	50040100 	.word	0x50040100
 8001934:	50040000 	.word	0x50040000
 8001938:	08002211 	.word	0x08002211
 800193c:	080022e9 	.word	0x080022e9
 8001940:	08002305 	.word	0x08002305

08001944 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0b6      	sub	sp, #216	; 0xd8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x22>
 800199e:	2302      	movs	r3, #2
 80019a0:	e3c6      	b.n	8002130 <HAL_ADC_ConfigChannel+0x7b0>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fd99 	bl	80014e6 <LL_ADC_REG_IsConversionOngoing>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f040 83a7 	bne.w	800210a <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b05      	cmp	r3, #5
 80019c2:	d824      	bhi.n	8001a0e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	3b02      	subs	r3, #2
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d81b      	bhi.n	8001a06 <HAL_ADC_ConfigChannel+0x86>
 80019ce:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <HAL_ADC_ConfigChannel+0x54>)
 80019d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d4:	080019e5 	.word	0x080019e5
 80019d8:	080019ed 	.word	0x080019ed
 80019dc:	080019f5 	.word	0x080019f5
 80019e0:	080019fd 	.word	0x080019fd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	220c      	movs	r2, #12
 80019e8:	605a      	str	r2, [r3, #4]
          break;
 80019ea:	e011      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	2212      	movs	r2, #18
 80019f0:	605a      	str	r2, [r3, #4]
          break;
 80019f2:	e00d      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	2218      	movs	r2, #24
 80019f8:	605a      	str	r2, [r3, #4]
          break;
 80019fa:	e009      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a02:	605a      	str	r2, [r3, #4]
          break;
 8001a04:	e004      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	2206      	movs	r2, #6
 8001a0a:	605a      	str	r2, [r3, #4]
          break;
 8001a0c:	e000      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001a0e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	6859      	ldr	r1, [r3, #4]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	f7ff fc4f 	bl	80012c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fd5d 	bl	80014e6 <LL_ADC_REG_IsConversionOngoing>
 8001a2c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fd69 	bl	800150c <LL_ADC_INJ_IsConversionOngoing>
 8001a3a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f040 81a6 	bne.w	8001d94 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f040 81a1 	bne.w	8001d94 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	6819      	ldr	r1, [r3, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f7ff fc5a 	bl	8001318 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	695a      	ldr	r2, [r3, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	08db      	lsrs	r3, r3, #3
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d00a      	beq.n	8001a9c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	6919      	ldr	r1, [r3, #16]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a96:	f7ff fbab 	bl	80011f0 <LL_ADC_SetOffset>
 8001a9a:	e17b      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fbc8 	bl	8001238 <LL_ADC_GetOffsetChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10a      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x148>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fbbd 	bl	8001238 <LL_ADC_GetOffsetChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	0e9b      	lsrs	r3, r3, #26
 8001ac2:	f003 021f 	and.w	r2, r3, #31
 8001ac6:	e01e      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x186>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fbb2 	bl	8001238 <LL_ADC_GetOffsetChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ae6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001aee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001af6:	2320      	movs	r3, #32
 8001af8:	e004      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001afa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d105      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x19e>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	0e9b      	lsrs	r3, r3, #26
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	e018      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x1d0>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001b42:	2320      	movs	r3, #32
 8001b44:	e004      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001b46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b4a:	fab3 f383 	clz	r3, r3
 8001b4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d106      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fb81 	bl	8001264 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2101      	movs	r1, #1
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fb65 	bl	8001238 <LL_ADC_GetOffsetChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10a      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x20e>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fb5a 	bl	8001238 <LL_ADC_GetOffsetChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	0e9b      	lsrs	r3, r3, #26
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	e01e      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x24c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2101      	movs	r1, #1
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fb4f 	bl	8001238 <LL_ADC_GetOffsetChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001bac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001bb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001bbc:	2320      	movs	r3, #32
 8001bbe:	e004      	b.n	8001bca <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001bc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d105      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x264>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0e9b      	lsrs	r3, r3, #26
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	e018      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x296>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001bf0:	fa93 f3a3 	rbit	r3, r3
 8001bf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001bf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001c08:	2320      	movs	r3, #32
 8001c0a:	e004      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001c0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d106      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2101      	movs	r1, #1
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fb1e 	bl	8001264 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fb02 	bl	8001238 <LL_ADC_GetOffsetChannel>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10a      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x2d4>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2102      	movs	r1, #2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff faf7 	bl	8001238 <LL_ADC_GetOffsetChannel>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	0e9b      	lsrs	r3, r3, #26
 8001c4e:	f003 021f 	and.w	r2, r3, #31
 8001c52:	e01e      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x312>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2102      	movs	r1, #2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff faec 	bl	8001238 <LL_ADC_GetOffsetChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001c82:	2320      	movs	r3, #32
 8001c84:	e004      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001c86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d105      	bne.n	8001caa <HAL_ADC_ConfigChannel+0x32a>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	0e9b      	lsrs	r3, r3, #26
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	e016      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x358>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cb6:	fa93 f3a3 	rbit	r3, r3
 8001cba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001cbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001cc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	e004      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001cce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d106      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fabd 	bl	8001264 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2103      	movs	r1, #3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff faa1 	bl	8001238 <LL_ADC_GetOffsetChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10a      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x396>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2103      	movs	r1, #3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fa96 	bl	8001238 <LL_ADC_GetOffsetChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	0e9b      	lsrs	r3, r3, #26
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	e017      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x3c6>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2103      	movs	r1, #3
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fa8b 	bl	8001238 <LL_ADC_GetOffsetChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d30:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001d38:	2320      	movs	r3, #32
 8001d3a:	e003      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x3de>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	0e9b      	lsrs	r3, r3, #26
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	e011      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x402>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001d76:	2320      	movs	r3, #32
 8001d78:	e003      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d106      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2103      	movs	r1, #3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fa68 	bl	8001264 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fb7d 	bl	8001498 <LL_ADC_IsEnabled>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f040 813f 	bne.w	8002024 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6819      	ldr	r1, [r3, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	461a      	mov	r2, r3
 8001db4:	f7ff fadc 	bl	8001370 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4a8e      	ldr	r2, [pc, #568]	; (8001ff8 <HAL_ADC_ConfigChannel+0x678>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	f040 8130 	bne.w	8002024 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10b      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x46c>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	0e9b      	lsrs	r3, r3, #26
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	2b09      	cmp	r3, #9
 8001de2:	bf94      	ite	ls
 8001de4:	2301      	movls	r3, #1
 8001de6:	2300      	movhi	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	e019      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x4a0>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dfc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001e04:	2320      	movs	r3, #32
 8001e06:	e003      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001e08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	3301      	adds	r3, #1
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	2b09      	cmp	r3, #9
 8001e18:	bf94      	ite	ls
 8001e1a:	2301      	movls	r3, #1
 8001e1c:	2300      	movhi	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d079      	beq.n	8001f18 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d107      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x4c0>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0e9b      	lsrs	r3, r3, #26
 8001e36:	3301      	adds	r3, #1
 8001e38:	069b      	lsls	r3, r3, #26
 8001e3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e3e:	e015      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x4ec>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e50:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001e58:	2320      	movs	r3, #32
 8001e5a:	e003      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	3301      	adds	r3, #1
 8001e66:	069b      	lsls	r3, r3, #26
 8001e68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x50c>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	0e9b      	lsrs	r3, r3, #26
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	2101      	movs	r1, #1
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	e017      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x53c>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001ea4:	2320      	movs	r3, #32
 8001ea6:	e003      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	ea42 0103 	orr.w	r1, r2, r3
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10a      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x562>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f003 021f 	and.w	r2, r3, #31
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	051b      	lsls	r3, r3, #20
 8001ee0:	e018      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x594>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001efa:	2320      	movs	r3, #32
 8001efc:	e003      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f00:	fab3 f383 	clz	r3, r3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	3301      	adds	r3, #1
 8001f08:	f003 021f 	and.w	r2, r3, #31
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f14:	430b      	orrs	r3, r1
 8001f16:	e080      	b.n	800201a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d107      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x5b4>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0e9b      	lsrs	r3, r3, #26
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	069b      	lsls	r3, r3, #26
 8001f2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f32:	e015      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x5e0>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f44:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	e003      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	3301      	adds	r3, #1
 8001f5a:	069b      	lsls	r3, r3, #26
 8001f5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d109      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x600>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0e9b      	lsrs	r3, r3, #26
 8001f72:	3301      	adds	r3, #1
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	2101      	movs	r1, #1
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	e017      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x630>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	fa93 f3a3 	rbit	r3, r3
 8001f8c:	61fb      	str	r3, [r7, #28]
  return result;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001f98:	2320      	movs	r3, #32
 8001f9a:	e003      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	f003 031f 	and.w	r3, r3, #31
 8001faa:	2101      	movs	r1, #1
 8001fac:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb0:	ea42 0103 	orr.w	r1, r2, r3
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10d      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x65c>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0e9b      	lsrs	r3, r3, #26
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	3b1e      	subs	r3, #30
 8001fd4:	051b      	lsls	r3, r3, #20
 8001fd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fda:	e01d      	b.n	8002018 <HAL_ADC_ConfigChannel+0x698>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	613b      	str	r3, [r7, #16]
  return result;
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d103      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	e005      	b.n	8002004 <HAL_ADC_ConfigChannel+0x684>
 8001ff8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	3301      	adds	r3, #1
 8002006:	f003 021f 	and.w	r2, r3, #31
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	3b1e      	subs	r3, #30
 8002012:	051b      	lsls	r3, r3, #20
 8002014:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002018:	430b      	orrs	r3, r1
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	6892      	ldr	r2, [r2, #8]
 800201e:	4619      	mov	r1, r3
 8002020:	f7ff f97a 	bl	8001318 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b43      	ldr	r3, [pc, #268]	; (8002138 <HAL_ADC_ConfigChannel+0x7b8>)
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d079      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002030:	4842      	ldr	r0, [pc, #264]	; (800213c <HAL_ADC_ConfigChannel+0x7bc>)
 8002032:	f7ff f8cf 	bl	80011d4 <LL_ADC_GetCommonPathInternalCh>
 8002036:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a40      	ldr	r2, [pc, #256]	; (8002140 <HAL_ADC_ConfigChannel+0x7c0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d12b      	bne.n	800209c <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002044:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d125      	bne.n	800209c <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a3b      	ldr	r2, [pc, #236]	; (8002144 <HAL_ADC_ConfigChannel+0x7c4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d004      	beq.n	8002064 <HAL_ADC_ConfigChannel+0x6e4>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a3a      	ldr	r2, [pc, #232]	; (8002148 <HAL_ADC_ConfigChannel+0x7c8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d15c      	bne.n	800211e <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002064:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002068:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800206c:	4619      	mov	r1, r3
 800206e:	4833      	ldr	r0, [pc, #204]	; (800213c <HAL_ADC_ConfigChannel+0x7bc>)
 8002070:	f7ff f89d 	bl	80011ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002074:	4b35      	ldr	r3, [pc, #212]	; (800214c <HAL_ADC_ConfigChannel+0x7cc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	099b      	lsrs	r3, r3, #6
 800207a:	4a35      	ldr	r2, [pc, #212]	; (8002150 <HAL_ADC_ConfigChannel+0x7d0>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	099a      	lsrs	r2, r3, #6
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800208c:	e002      	b.n	8002094 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3b01      	subs	r3, #1
 8002092:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f9      	bne.n	800208e <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800209a:	e040      	b.n	800211e <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a2c      	ldr	r2, [pc, #176]	; (8002154 <HAL_ADC_ConfigChannel+0x7d4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d118      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x758>
 80020a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d112      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a23      	ldr	r2, [pc, #140]	; (8002144 <HAL_ADC_ConfigChannel+0x7c4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d004      	beq.n	80020c6 <HAL_ADC_ConfigChannel+0x746>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a21      	ldr	r2, [pc, #132]	; (8002148 <HAL_ADC_ConfigChannel+0x7c8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d12d      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ce:	4619      	mov	r1, r3
 80020d0:	481a      	ldr	r0, [pc, #104]	; (800213c <HAL_ADC_ConfigChannel+0x7bc>)
 80020d2:	f7ff f86c 	bl	80011ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020d6:	e024      	b.n	8002122 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_ADC_ConfigChannel+0x7d8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d120      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d11a      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a14      	ldr	r2, [pc, #80]	; (8002144 <HAL_ADC_ConfigChannel+0x7c4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d115      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002100:	4619      	mov	r1, r3
 8002102:	480e      	ldr	r0, [pc, #56]	; (800213c <HAL_ADC_ConfigChannel+0x7bc>)
 8002104:	f7ff f853 	bl	80011ae <LL_ADC_SetCommonPathInternalCh>
 8002108:	e00c      	b.n	8002124 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210e:	f043 0220 	orr.w	r2, r3, #32
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800211c:	e002      	b.n	8002124 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800211e:	bf00      	nop
 8002120:	e000      	b.n	8002124 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002122:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800212c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002130:	4618      	mov	r0, r3
 8002132:	37d8      	adds	r7, #216	; 0xd8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	80080000 	.word	0x80080000
 800213c:	50040300 	.word	0x50040300
 8002140:	c7520000 	.word	0xc7520000
 8002144:	50040000 	.word	0x50040000
 8002148:	50040200 	.word	0x50040200
 800214c:	2000000c 	.word	0x2000000c
 8002150:	053e2d63 	.word	0x053e2d63
 8002154:	cb840000 	.word	0xcb840000
 8002158:	80000001 	.word	0x80000001

0800215c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff f995 	bl	8001498 <LL_ADC_IsEnabled>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d146      	bne.n	8002202 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	4b24      	ldr	r3, [pc, #144]	; (800220c <ADC_Enable+0xb0>)
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00d      	beq.n	800219e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	f043 0210 	orr.w	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	f043 0201 	orr.w	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e032      	b.n	8002204 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff f964 	bl	8001470 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021a8:	f7fe ffe2 	bl	8001170 <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021ae:	e021      	b.n	80021f4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff f96f 	bl	8001498 <LL_ADC_IsEnabled>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d104      	bne.n	80021ca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff f953 	bl	8001470 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021ca:	f7fe ffd1 	bl	8001170 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d90d      	bls.n	80021f4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	f043 0210 	orr.w	r2, r3, #16
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	f043 0201 	orr.w	r2, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e007      	b.n	8002204 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d1d6      	bne.n	80021b0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	8000003f 	.word	0x8000003f

08002210 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002226:	2b00      	cmp	r3, #0
 8002228:	d14b      	bne.n	80022c2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d021      	beq.n	8002288 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff f826 	bl	800129a <LL_ADC_REG_IsTriggerSourceSWStart>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d032      	beq.n	80022ba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d12b      	bne.n	80022ba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d11f      	bne.n	80022ba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	655a      	str	r2, [r3, #84]	; 0x54
 8002286:	e018      	b.n	80022ba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d111      	bne.n	80022ba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b2:	f043 0201 	orr.w	r2, r3, #1
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7ff fb42 	bl	8001944 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022c0:	e00e      	b.n	80022e0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7ff fb4c 	bl	800196c <HAL_ADC_ErrorCallback>
}
 80022d4:	e004      	b.n	80022e0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
}
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f7ff fb2e 	bl	8001958 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	f043 0204 	orr.w	r2, r3, #4
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f7ff fb1e 	bl	800196c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002330:	bf00      	nop
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <LL_ADC_IsEnabled>:
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <LL_ADC_IsEnabled+0x18>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <LL_ADC_IsEnabled+0x1a>
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <LL_ADC_REG_IsConversionOngoing>:
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b04      	cmp	r3, #4
 8002370:	d101      	bne.n	8002376 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b09f      	sub	sp, #124	; 0x7c
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800239e:	2302      	movs	r3, #2
 80023a0:	e08f      	b.n	80024c2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a47      	ldr	r2, [pc, #284]	; (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d102      	bne.n	80023ba <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80023b4:	4b46      	ldr	r3, [pc, #280]	; (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	e001      	b.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10b      	bne.n	80023dc <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	f043 0220 	orr.w	r2, r3, #32
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e072      	b.n	80024c2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ffbd 	bl	800235e <LL_ADC_REG_IsConversionOngoing>
 80023e4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ffb7 	bl	800235e <LL_ADC_REG_IsConversionOngoing>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d154      	bne.n	80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80023f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d151      	bne.n	80024a0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023fc:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023fe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d02c      	beq.n	8002462 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800241a:	035b      	lsls	r3, r3, #13
 800241c:	430b      	orrs	r3, r1
 800241e:	431a      	orrs	r2, r3
 8002420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002422:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002424:	4829      	ldr	r0, [pc, #164]	; (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002426:	f7ff ff87 	bl	8002338 <LL_ADC_IsEnabled>
 800242a:	4604      	mov	r4, r0
 800242c:	4828      	ldr	r0, [pc, #160]	; (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800242e:	f7ff ff83 	bl	8002338 <LL_ADC_IsEnabled>
 8002432:	4603      	mov	r3, r0
 8002434:	431c      	orrs	r4, r3
 8002436:	4828      	ldr	r0, [pc, #160]	; (80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002438:	f7ff ff7e 	bl	8002338 <LL_ADC_IsEnabled>
 800243c:	4603      	mov	r3, r0
 800243e:	4323      	orrs	r3, r4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d137      	bne.n	80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800244c:	f023 030f 	bic.w	r3, r3, #15
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	6811      	ldr	r1, [r2, #0]
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	6892      	ldr	r2, [r2, #8]
 8002458:	430a      	orrs	r2, r1
 800245a:	431a      	orrs	r2, r3
 800245c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002460:	e028      	b.n	80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800246a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800246c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800246e:	4817      	ldr	r0, [pc, #92]	; (80024cc <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002470:	f7ff ff62 	bl	8002338 <LL_ADC_IsEnabled>
 8002474:	4604      	mov	r4, r0
 8002476:	4816      	ldr	r0, [pc, #88]	; (80024d0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002478:	f7ff ff5e 	bl	8002338 <LL_ADC_IsEnabled>
 800247c:	4603      	mov	r3, r0
 800247e:	431c      	orrs	r4, r3
 8002480:	4815      	ldr	r0, [pc, #84]	; (80024d8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002482:	f7ff ff59 	bl	8002338 <LL_ADC_IsEnabled>
 8002486:	4603      	mov	r3, r0
 8002488:	4323      	orrs	r3, r4
 800248a:	2b00      	cmp	r3, #0
 800248c:	d112      	bne.n	80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800248e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002496:	f023 030f 	bic.w	r3, r3, #15
 800249a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800249c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800249e:	e009      	b.n	80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a4:	f043 0220 	orr.w	r2, r3, #32
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80024b2:	e000      	b.n	80024b6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	377c      	adds	r7, #124	; 0x7c
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd90      	pop	{r4, r7, pc}
 80024ca:	bf00      	nop
 80024cc:	50040000 	.word	0x50040000
 80024d0:	50040100 	.word	0x50040100
 80024d4:	50040300 	.word	0x50040300
 80024d8:	50040200 	.word	0x50040200

080024dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <__NVIC_SetPriorityGrouping+0x44>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f8:	4013      	ands	r3, r2
 80024fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800250c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250e:	4a04      	ldr	r2, [pc, #16]	; (8002520 <__NVIC_SetPriorityGrouping+0x44>)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	60d3      	str	r3, [r2, #12]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <__NVIC_GetPriorityGrouping+0x18>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	f003 0307 	and.w	r3, r3, #7
}
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	2b00      	cmp	r3, #0
 8002550:	db0b      	blt.n	800256a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	f003 021f 	and.w	r2, r3, #31
 8002558:	4907      	ldr	r1, [pc, #28]	; (8002578 <__NVIC_EnableIRQ+0x38>)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	2001      	movs	r0, #1
 8002562:	fa00 f202 	lsl.w	r2, r0, r2
 8002566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000e100 	.word	0xe000e100

0800257c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	2b00      	cmp	r3, #0
 800258e:	db0a      	blt.n	80025a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	490c      	ldr	r1, [pc, #48]	; (80025c8 <__NVIC_SetPriority+0x4c>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	440b      	add	r3, r1
 80025a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a4:	e00a      	b.n	80025bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4908      	ldr	r1, [pc, #32]	; (80025cc <__NVIC_SetPriority+0x50>)
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	3b04      	subs	r3, #4
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	440b      	add	r3, r1
 80025ba:	761a      	strb	r2, [r3, #24]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000e100 	.word	0xe000e100
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f1c3 0307 	rsb	r3, r3, #7
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	bf28      	it	cs
 80025ee:	2304      	movcs	r3, #4
 80025f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3304      	adds	r3, #4
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d902      	bls.n	8002600 <NVIC_EncodePriority+0x30>
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3b03      	subs	r3, #3
 80025fe:	e000      	b.n	8002602 <NVIC_EncodePriority+0x32>
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	f04f 32ff 	mov.w	r2, #4294967295
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	401a      	ands	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002618:	f04f 31ff 	mov.w	r1, #4294967295
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	43d9      	mvns	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	4313      	orrs	r3, r2
         );
}
 800262a:	4618      	mov	r0, r3
 800262c:	3724      	adds	r7, #36	; 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002648:	d301      	bcc.n	800264e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264a:	2301      	movs	r3, #1
 800264c:	e00f      	b.n	800266e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <SysTick_Config+0x40>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002656:	210f      	movs	r1, #15
 8002658:	f04f 30ff 	mov.w	r0, #4294967295
 800265c:	f7ff ff8e 	bl	800257c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <SysTick_Config+0x40>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002666:	4b04      	ldr	r3, [pc, #16]	; (8002678 <SysTick_Config+0x40>)
 8002668:	2207      	movs	r2, #7
 800266a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	e000e010 	.word	0xe000e010

0800267c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff29 	bl	80024dc <__NVIC_SetPriorityGrouping>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026a4:	f7ff ff3e 	bl	8002524 <__NVIC_GetPriorityGrouping>
 80026a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	6978      	ldr	r0, [r7, #20]
 80026b0:	f7ff ff8e 	bl	80025d0 <NVIC_EncodePriority>
 80026b4:	4602      	mov	r2, r0
 80026b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff5d 	bl	800257c <__NVIC_SetPriority>
}
 80026c2:	bf00      	nop
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff31 	bl	8002540 <__NVIC_EnableIRQ>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ffa2 	bl	8002638 <SysTick_Config>
 80026f4:	4603      	mov	r3, r0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e098      	b.n	8002844 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	4b4d      	ldr	r3, [pc, #308]	; (8002850 <HAL_DMA_Init+0x150>)
 800271a:	429a      	cmp	r2, r3
 800271c:	d80f      	bhi.n	800273e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	4b4b      	ldr	r3, [pc, #300]	; (8002854 <HAL_DMA_Init+0x154>)
 8002726:	4413      	add	r3, r2
 8002728:	4a4b      	ldr	r2, [pc, #300]	; (8002858 <HAL_DMA_Init+0x158>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	009a      	lsls	r2, r3, #2
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a48      	ldr	r2, [pc, #288]	; (800285c <HAL_DMA_Init+0x15c>)
 800273a:	641a      	str	r2, [r3, #64]	; 0x40
 800273c:	e00e      	b.n	800275c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	4b46      	ldr	r3, [pc, #280]	; (8002860 <HAL_DMA_Init+0x160>)
 8002746:	4413      	add	r3, r2
 8002748:	4a43      	ldr	r2, [pc, #268]	; (8002858 <HAL_DMA_Init+0x158>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	091b      	lsrs	r3, r3, #4
 8002750:	009a      	lsls	r2, r3, #2
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a42      	ldr	r2, [pc, #264]	; (8002864 <HAL_DMA_Init+0x164>)
 800275a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002776:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027b6:	d039      	beq.n	800282c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	4a27      	ldr	r2, [pc, #156]	; (800285c <HAL_DMA_Init+0x15c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d11a      	bne.n	80027f8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027c2:	4b29      	ldr	r3, [pc, #164]	; (8002868 <HAL_DMA_Init+0x168>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	f003 031c 	and.w	r3, r3, #28
 80027ce:	210f      	movs	r1, #15
 80027d0:	fa01 f303 	lsl.w	r3, r1, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	4924      	ldr	r1, [pc, #144]	; (8002868 <HAL_DMA_Init+0x168>)
 80027d8:	4013      	ands	r3, r2
 80027da:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027dc:	4b22      	ldr	r3, [pc, #136]	; (8002868 <HAL_DMA_Init+0x168>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e8:	f003 031c 	and.w	r3, r3, #28
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	491d      	ldr	r1, [pc, #116]	; (8002868 <HAL_DMA_Init+0x168>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]
 80027f6:	e019      	b.n	800282c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027f8:	4b1c      	ldr	r3, [pc, #112]	; (800286c <HAL_DMA_Init+0x16c>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002800:	f003 031c 	and.w	r3, r3, #28
 8002804:	210f      	movs	r1, #15
 8002806:	fa01 f303 	lsl.w	r3, r1, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	4917      	ldr	r1, [pc, #92]	; (800286c <HAL_DMA_Init+0x16c>)
 800280e:	4013      	ands	r3, r2
 8002810:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002812:	4b16      	ldr	r3, [pc, #88]	; (800286c <HAL_DMA_Init+0x16c>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6859      	ldr	r1, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f003 031c 	and.w	r3, r3, #28
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	4911      	ldr	r1, [pc, #68]	; (800286c <HAL_DMA_Init+0x16c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	40020407 	.word	0x40020407
 8002854:	bffdfff8 	.word	0xbffdfff8
 8002858:	cccccccd 	.word	0xcccccccd
 800285c:	40020000 	.word	0x40020000
 8002860:	bffdfbf8 	.word	0xbffdfbf8
 8002864:	40020400 	.word	0x40020400
 8002868:	400200a8 	.word	0x400200a8
 800286c:	400204a8 	.word	0x400204a8

08002870 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_DMA_Start_IT+0x20>
 800288c:	2302      	movs	r3, #2
 800288e:	e04b      	b.n	8002928 <HAL_DMA_Start_IT+0xb8>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d13a      	bne.n	800291a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0201 	bic.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f8e0 	bl	8002a8e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 020e 	orr.w	r2, r2, #14
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e00f      	b.n	8002908 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0204 	bic.w	r2, r2, #4
 80028f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 020a 	orr.w	r2, r2, #10
 8002906:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e005      	b.n	8002926 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002922:	2302      	movs	r3, #2
 8002924:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002926:	7dfb      	ldrb	r3, [r7, #23]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	f003 031c 	and.w	r3, r3, #28
 8002950:	2204      	movs	r2, #4
 8002952:	409a      	lsls	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d026      	beq.n	80029aa <HAL_DMA_IRQHandler+0x7a>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d021      	beq.n	80029aa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d107      	bne.n	8002984 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0204 	bic.w	r2, r2, #4
 8002982:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	f003 021c 	and.w	r2, r3, #28
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	2104      	movs	r1, #4
 8002992:	fa01 f202 	lsl.w	r2, r1, r2
 8002996:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	2b00      	cmp	r3, #0
 800299e:	d071      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80029a8:	e06c      	b.n	8002a84 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f003 031c 	and.w	r3, r3, #28
 80029b2:	2202      	movs	r2, #2
 80029b4:	409a      	lsls	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d02e      	beq.n	8002a1c <HAL_DMA_IRQHandler+0xec>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d029      	beq.n	8002a1c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10b      	bne.n	80029ee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 020a 	bic.w	r2, r2, #10
 80029e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f003 021c 	and.w	r2, r3, #28
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2102      	movs	r1, #2
 80029fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002a00:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d038      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a1a:	e033      	b.n	8002a84 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a20:	f003 031c 	and.w	r3, r3, #28
 8002a24:	2208      	movs	r2, #8
 8002a26:	409a      	lsls	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d02a      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x156>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d025      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 020e 	bic.w	r2, r2, #14
 8002a48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f003 021c 	and.w	r2, r3, #28
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	2101      	movs	r1, #1
 8002a58:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d004      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
}
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa0:	f003 021c 	and.w	r2, r3, #28
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002aae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d108      	bne.n	8002ad2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ad0:	e007      	b.n	8002ae2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	60da      	str	r2, [r3, #12]
}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002afe:	e17f      	b.n	8002e00 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	2101      	movs	r1, #1
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 8171 	beq.w	8002dfa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d00b      	beq.n	8002b38 <HAL_GPIO_Init+0x48>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d007      	beq.n	8002b38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b2c:	2b11      	cmp	r3, #17
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b12      	cmp	r3, #18
 8002b36:	d130      	bne.n	8002b9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b6e:	2201      	movs	r2, #1
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	f003 0201 	and.w	r2, r3, #1
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d118      	bne.n	8002bd8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002bac:	2201      	movs	r2, #1
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	08db      	lsrs	r3, r3, #3
 8002bc2:	f003 0201 	and.w	r2, r3, #1
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	2203      	movs	r2, #3
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x128>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b12      	cmp	r3, #18
 8002c16:	d123      	bne.n	8002c60 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	08da      	lsrs	r2, r3, #3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3208      	adds	r2, #8
 8002c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	220f      	movs	r2, #15
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	08da      	lsrs	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3208      	adds	r2, #8
 8002c5a:	6939      	ldr	r1, [r7, #16]
 8002c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0203 	and.w	r2, r3, #3
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80ac 	beq.w	8002dfa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca2:	4b5e      	ldr	r3, [pc, #376]	; (8002e1c <HAL_GPIO_Init+0x32c>)
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca6:	4a5d      	ldr	r2, [pc, #372]	; (8002e1c <HAL_GPIO_Init+0x32c>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6613      	str	r3, [r2, #96]	; 0x60
 8002cae:	4b5b      	ldr	r3, [pc, #364]	; (8002e1c <HAL_GPIO_Init+0x32c>)
 8002cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cba:	4a59      	ldr	r2, [pc, #356]	; (8002e20 <HAL_GPIO_Init+0x330>)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	089b      	lsrs	r3, r3, #2
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	220f      	movs	r2, #15
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ce4:	d025      	beq.n	8002d32 <HAL_GPIO_Init+0x242>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4e      	ldr	r2, [pc, #312]	; (8002e24 <HAL_GPIO_Init+0x334>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d01f      	beq.n	8002d2e <HAL_GPIO_Init+0x23e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a4d      	ldr	r2, [pc, #308]	; (8002e28 <HAL_GPIO_Init+0x338>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d019      	beq.n	8002d2a <HAL_GPIO_Init+0x23a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a4c      	ldr	r2, [pc, #304]	; (8002e2c <HAL_GPIO_Init+0x33c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_GPIO_Init+0x236>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a4b      	ldr	r2, [pc, #300]	; (8002e30 <HAL_GPIO_Init+0x340>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00d      	beq.n	8002d22 <HAL_GPIO_Init+0x232>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a4a      	ldr	r2, [pc, #296]	; (8002e34 <HAL_GPIO_Init+0x344>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d007      	beq.n	8002d1e <HAL_GPIO_Init+0x22e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a49      	ldr	r2, [pc, #292]	; (8002e38 <HAL_GPIO_Init+0x348>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d101      	bne.n	8002d1a <HAL_GPIO_Init+0x22a>
 8002d16:	2306      	movs	r3, #6
 8002d18:	e00c      	b.n	8002d34 <HAL_GPIO_Init+0x244>
 8002d1a:	2307      	movs	r3, #7
 8002d1c:	e00a      	b.n	8002d34 <HAL_GPIO_Init+0x244>
 8002d1e:	2305      	movs	r3, #5
 8002d20:	e008      	b.n	8002d34 <HAL_GPIO_Init+0x244>
 8002d22:	2304      	movs	r3, #4
 8002d24:	e006      	b.n	8002d34 <HAL_GPIO_Init+0x244>
 8002d26:	2303      	movs	r3, #3
 8002d28:	e004      	b.n	8002d34 <HAL_GPIO_Init+0x244>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e002      	b.n	8002d34 <HAL_GPIO_Init+0x244>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_GPIO_Init+0x244>
 8002d32:	2300      	movs	r3, #0
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	f002 0203 	and.w	r2, r2, #3
 8002d3a:	0092      	lsls	r2, r2, #2
 8002d3c:	4093      	lsls	r3, r2
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d44:	4936      	ldr	r1, [pc, #216]	; (8002e20 <HAL_GPIO_Init+0x330>)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	089b      	lsrs	r3, r3, #2
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d52:	4b3a      	ldr	r3, [pc, #232]	; (8002e3c <HAL_GPIO_Init+0x34c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d76:	4a31      	ldr	r2, [pc, #196]	; (8002e3c <HAL_GPIO_Init+0x34c>)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002d7c:	4b2f      	ldr	r3, [pc, #188]	; (8002e3c <HAL_GPIO_Init+0x34c>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002da0:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <HAL_GPIO_Init+0x34c>)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002da6:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <HAL_GPIO_Init+0x34c>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dca:	4a1c      	ldr	r2, [pc, #112]	; (8002e3c <HAL_GPIO_Init+0x34c>)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dd0:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <HAL_GPIO_Init+0x34c>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002df4:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <HAL_GPIO_Init+0x34c>)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f47f ae78 	bne.w	8002b00 <HAL_GPIO_Init+0x10>
  }
}
 8002e10:	bf00      	nop
 8002e12:	371c      	adds	r7, #28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40010000 	.word	0x40010000
 8002e24:	48000400 	.word	0x48000400
 8002e28:	48000800 	.word	0x48000800
 8002e2c:	48000c00 	.word	0x48000c00
 8002e30:	48001000 	.word	0x48001000
 8002e34:	48001400 	.word	0x48001400
 8002e38:	48001800 	.word	0x48001800
 8002e3c:	40010400 	.word	0x40010400

08002e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	887b      	ldrh	r3, [r7, #2]
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
 8002e5c:	e001      	b.n	8002e62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	807b      	strh	r3, [r7, #2]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e80:	787b      	ldrb	r3, [r7, #1]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e86:	887a      	ldrh	r2, [r7, #2]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e8c:	e002      	b.n	8002e94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40007000 	.word	0x40007000

08002ebc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eca:	d130      	bne.n	8002f2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ecc:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed8:	d038      	beq.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eda:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ee8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eea:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2232      	movs	r2, #50	; 0x32
 8002ef0:	fb02 f303 	mul.w	r3, r2, r3
 8002ef4:	4a1b      	ldr	r2, [pc, #108]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	0c9b      	lsrs	r3, r3, #18
 8002efc:	3301      	adds	r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f00:	e002      	b.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f08:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f14:	d102      	bne.n	8002f1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f2      	bne.n	8002f02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f28:	d110      	bne.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e00f      	b.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3a:	d007      	beq.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f3c:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f44:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	2000000c 	.word	0x2000000c
 8002f64:	431bde83 	.word	0x431bde83

08002f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e3d4      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7a:	4ba1      	ldr	r3, [pc, #644]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f84:	4b9e      	ldr	r3, [pc, #632]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80e4 	beq.w	8003164 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d007      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x4a>
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b0c      	cmp	r3, #12
 8002fa6:	f040 808b 	bne.w	80030c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	f040 8087 	bne.w	80030c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fb2:	4b93      	ldr	r3, [pc, #588]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_RCC_OscConfig+0x62>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e3ac      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1a      	ldr	r2, [r3, #32]
 8002fce:	4b8c      	ldr	r3, [pc, #560]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d004      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x7c>
 8002fda:	4b89      	ldr	r3, [pc, #548]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe2:	e005      	b.n	8002ff0 <HAL_RCC_OscConfig+0x88>
 8002fe4:	4b86      	ldr	r3, [pc, #536]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8002fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fea:	091b      	lsrs	r3, r3, #4
 8002fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d223      	bcs.n	800303c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fd3f 	bl	8003a7c <RCC_SetFlashLatencyFromMSIRange>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e38d      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003008:	4b7d      	ldr	r3, [pc, #500]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7c      	ldr	r2, [pc, #496]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 800300e:	f043 0308 	orr.w	r3, r3, #8
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	4b7a      	ldr	r3, [pc, #488]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4977      	ldr	r1, [pc, #476]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003026:	4b76      	ldr	r3, [pc, #472]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	4972      	ldr	r1, [pc, #456]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]
 800303a:	e025      	b.n	8003088 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800303c:	4b70      	ldr	r3, [pc, #448]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a6f      	ldr	r2, [pc, #444]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003042:	f043 0308 	orr.w	r3, r3, #8
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b6d      	ldr	r3, [pc, #436]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	496a      	ldr	r1, [pc, #424]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800305a:	4b69      	ldr	r3, [pc, #420]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	4965      	ldr	r1, [pc, #404]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d109      	bne.n	8003088 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fcff 	bl	8003a7c <RCC_SetFlashLatencyFromMSIRange>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e34d      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003088:	f000 fc36 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 800308c:	4601      	mov	r1, r0
 800308e:	4b5c      	ldr	r3, [pc, #368]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	091b      	lsrs	r3, r3, #4
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	4a5a      	ldr	r2, [pc, #360]	; (8003204 <HAL_RCC_OscConfig+0x29c>)
 800309a:	5cd3      	ldrb	r3, [r2, r3]
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	fa21 f303 	lsr.w	r3, r1, r3
 80030a4:	4a58      	ldr	r2, [pc, #352]	; (8003208 <HAL_RCC_OscConfig+0x2a0>)
 80030a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030a8:	4b58      	ldr	r3, [pc, #352]	; (800320c <HAL_RCC_OscConfig+0x2a4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe f80f 	bl	80010d0 <HAL_InitTick>
 80030b2:	4603      	mov	r3, r0
 80030b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d052      	beq.n	8003162 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	e331      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d032      	beq.n	800312e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030c8:	4b4d      	ldr	r3, [pc, #308]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a4c      	ldr	r2, [pc, #304]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030d4:	f7fe f84c 	bl	8001170 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030dc:	f7fe f848 	bl	8001170 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e31a      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030ee:	4b44      	ldr	r3, [pc, #272]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030fa:	4b41      	ldr	r3, [pc, #260]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a40      	ldr	r2, [pc, #256]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003100:	f043 0308 	orr.w	r3, r3, #8
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	4b3e      	ldr	r3, [pc, #248]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	493b      	ldr	r1, [pc, #236]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003114:	4313      	orrs	r3, r2
 8003116:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003118:	4b39      	ldr	r3, [pc, #228]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	4936      	ldr	r1, [pc, #216]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
 800312c:	e01a      	b.n	8003164 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800312e:	4b34      	ldr	r3, [pc, #208]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a33      	ldr	r2, [pc, #204]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800313a:	f7fe f819 	bl	8001170 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003142:	f7fe f815 	bl	8001170 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e2e7      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003154:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <HAL_RCC_OscConfig+0x1da>
 8003160:	e000      	b.n	8003164 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003162:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d074      	beq.n	800325a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b08      	cmp	r3, #8
 8003174:	d005      	beq.n	8003182 <HAL_RCC_OscConfig+0x21a>
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2b0c      	cmp	r3, #12
 800317a:	d10e      	bne.n	800319a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d10b      	bne.n	800319a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003182:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d064      	beq.n	8003258 <HAL_RCC_OscConfig+0x2f0>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d160      	bne.n	8003258 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e2c4      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a2:	d106      	bne.n	80031b2 <HAL_RCC_OscConfig+0x24a>
 80031a4:	4b16      	ldr	r3, [pc, #88]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a15      	ldr	r2, [pc, #84]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	e01d      	b.n	80031ee <HAL_RCC_OscConfig+0x286>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ba:	d10c      	bne.n	80031d6 <HAL_RCC_OscConfig+0x26e>
 80031bc:	4b10      	ldr	r3, [pc, #64]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	e00b      	b.n	80031ee <HAL_RCC_OscConfig+0x286>
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a09      	ldr	r2, [pc, #36]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a06      	ldr	r2, [pc, #24]	; (8003200 <HAL_RCC_OscConfig+0x298>)
 80031e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d01c      	beq.n	8003230 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f6:	f7fd ffbb 	bl	8001170 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031fc:	e011      	b.n	8003222 <HAL_RCC_OscConfig+0x2ba>
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	0800611c 	.word	0x0800611c
 8003208:	2000000c 	.word	0x2000000c
 800320c:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7fd ffae 	bl	8001170 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e280      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003222:	4baf      	ldr	r3, [pc, #700]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x2a8>
 800322e:	e014      	b.n	800325a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fd ff9e 	bl	8001170 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7fd ff9a 	bl	8001170 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e26c      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800324a:	4ba5      	ldr	r3, [pc, #660]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x2d0>
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d060      	beq.n	8003328 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d005      	beq.n	8003278 <HAL_RCC_OscConfig+0x310>
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d119      	bne.n	80032a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d116      	bne.n	80032a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003278:	4b99      	ldr	r3, [pc, #612]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_OscConfig+0x328>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e249      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003290:	4b93      	ldr	r3, [pc, #588]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	4990      	ldr	r1, [pc, #576]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a4:	e040      	b.n	8003328 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d023      	beq.n	80032f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ae:	4b8c      	ldr	r3, [pc, #560]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a8b      	ldr	r2, [pc, #556]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fd ff59 	bl	8001170 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fd ff55 	bl	8001170 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e227      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d4:	4b82      	ldr	r3, [pc, #520]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b7f      	ldr	r3, [pc, #508]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	061b      	lsls	r3, r3, #24
 80032ee:	497c      	ldr	r1, [pc, #496]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
 80032f4:	e018      	b.n	8003328 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f6:	4b7a      	ldr	r3, [pc, #488]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a79      	ldr	r2, [pc, #484]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80032fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7fd ff35 	bl	8001170 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330a:	f7fd ff31 	bl	8001170 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e203      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800331c:	4b70      	ldr	r3, [pc, #448]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f0      	bne.n	800330a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d03c      	beq.n	80033ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01c      	beq.n	8003376 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800333c:	4b68      	ldr	r3, [pc, #416]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800333e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003342:	4a67      	ldr	r2, [pc, #412]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fd ff10 	bl	8001170 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003354:	f7fd ff0c 	bl	8001170 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e1de      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003366:	4b5e      	ldr	r3, [pc, #376]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0ef      	beq.n	8003354 <HAL_RCC_OscConfig+0x3ec>
 8003374:	e01b      	b.n	80033ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003376:	4b5a      	ldr	r3, [pc, #360]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337c:	4a58      	ldr	r2, [pc, #352]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003386:	f7fd fef3 	bl	8001170 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338e:	f7fd feef 	bl	8001170 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e1c1      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033a0:	4b4f      	ldr	r3, [pc, #316]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80033a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1ef      	bne.n	800338e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80a6 	beq.w	8003508 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033bc:	2300      	movs	r3, #0
 80033be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033c0:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80033c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10d      	bne.n	80033e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033cc:	4b44      	ldr	r3, [pc, #272]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80033ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d0:	4a43      	ldr	r2, [pc, #268]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d6:	6593      	str	r3, [r2, #88]	; 0x58
 80033d8:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e4:	2301      	movs	r3, #1
 80033e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e8:	4b3e      	ldr	r3, [pc, #248]	; (80034e4 <HAL_RCC_OscConfig+0x57c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d118      	bne.n	8003426 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f4:	4b3b      	ldr	r3, [pc, #236]	; (80034e4 <HAL_RCC_OscConfig+0x57c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a3a      	ldr	r2, [pc, #232]	; (80034e4 <HAL_RCC_OscConfig+0x57c>)
 80033fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003400:	f7fd feb6 	bl	8001170 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003408:	f7fd feb2 	bl	8001170 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e184      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341a:	4b32      	ldr	r3, [pc, #200]	; (80034e4 <HAL_RCC_OscConfig+0x57c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d108      	bne.n	8003440 <HAL_RCC_OscConfig+0x4d8>
 800342e:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003434:	4a2a      	ldr	r2, [pc, #168]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800343e:	e024      	b.n	800348a <HAL_RCC_OscConfig+0x522>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b05      	cmp	r3, #5
 8003446:	d110      	bne.n	800346a <HAL_RCC_OscConfig+0x502>
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	4a24      	ldr	r2, [pc, #144]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003458:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345e:	4a20      	ldr	r2, [pc, #128]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003468:	e00f      	b.n	800348a <HAL_RCC_OscConfig+0x522>
 800346a:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800347a:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	4a17      	ldr	r2, [pc, #92]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 8003482:	f023 0304 	bic.w	r3, r3, #4
 8003486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d016      	beq.n	80034c0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003492:	f7fd fe6d 	bl	8001170 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7fd fe69 	bl	8001170 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e139      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_OscConfig+0x578>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0ed      	beq.n	800349a <HAL_RCC_OscConfig+0x532>
 80034be:	e01a      	b.n	80034f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c0:	f7fd fe56 	bl	8001170 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c6:	e00f      	b.n	80034e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c8:	f7fd fe52 	bl	8001170 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d906      	bls.n	80034e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e122      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e8:	4b90      	ldr	r3, [pc, #576]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e8      	bne.n	80034c8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f6:	7ffb      	ldrb	r3, [r7, #31]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d105      	bne.n	8003508 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fc:	4b8b      	ldr	r3, [pc, #556]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003500:	4a8a      	ldr	r2, [pc, #552]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 8003502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003506:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8108 	beq.w	8003722 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	2b02      	cmp	r3, #2
 8003518:	f040 80d0 	bne.w	80036bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800351c:	4b83      	ldr	r3, [pc, #524]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f003 0203 	and.w	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	429a      	cmp	r2, r3
 800352e:	d130      	bne.n	8003592 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	3b01      	subs	r3, #1
 800353c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d127      	bne.n	8003592 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d11f      	bne.n	8003592 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800355c:	2a07      	cmp	r2, #7
 800355e:	bf14      	ite	ne
 8003560:	2201      	movne	r2, #1
 8003562:	2200      	moveq	r2, #0
 8003564:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003566:	4293      	cmp	r3, r2
 8003568:	d113      	bne.n	8003592 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	3b01      	subs	r3, #1
 8003578:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d109      	bne.n	8003592 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	3b01      	subs	r3, #1
 800358c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d06e      	beq.n	8003670 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d069      	beq.n	800366c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003598:	4b64      	ldr	r3, [pc, #400]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d105      	bne.n	80035b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035a4:	4b61      	ldr	r3, [pc, #388]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0b7      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035b4:	4b5d      	ldr	r3, [pc, #372]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a5c      	ldr	r2, [pc, #368]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 80035ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035c0:	f7fd fdd6 	bl	8001170 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fd fdd2 	bl	8001170 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e0a4      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035da:	4b54      	ldr	r3, [pc, #336]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e6:	4b51      	ldr	r3, [pc, #324]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	4b51      	ldr	r3, [pc, #324]	; (8003730 <HAL_RCC_OscConfig+0x7c8>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035f6:	3a01      	subs	r2, #1
 80035f8:	0112      	lsls	r2, r2, #4
 80035fa:	4311      	orrs	r1, r2
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003600:	0212      	lsls	r2, r2, #8
 8003602:	4311      	orrs	r1, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003608:	0852      	lsrs	r2, r2, #1
 800360a:	3a01      	subs	r2, #1
 800360c:	0552      	lsls	r2, r2, #21
 800360e:	4311      	orrs	r1, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003614:	0852      	lsrs	r2, r2, #1
 8003616:	3a01      	subs	r2, #1
 8003618:	0652      	lsls	r2, r2, #25
 800361a:	4311      	orrs	r1, r2
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003620:	0912      	lsrs	r2, r2, #4
 8003622:	0452      	lsls	r2, r2, #17
 8003624:	430a      	orrs	r2, r1
 8003626:	4941      	ldr	r1, [pc, #260]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 8003628:	4313      	orrs	r3, r2
 800362a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800362c:	4b3f      	ldr	r3, [pc, #252]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a3e      	ldr	r2, [pc, #248]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 8003632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003636:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003638:	4b3c      	ldr	r3, [pc, #240]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a3b      	ldr	r2, [pc, #236]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 800363e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003642:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003644:	f7fd fd94 	bl	8001170 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7fd fd90 	bl	8001170 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e062      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365e:	4b33      	ldr	r3, [pc, #204]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800366a:	e05a      	b.n	8003722 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e059      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003670:	4b2e      	ldr	r3, [pc, #184]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d152      	bne.n	8003722 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800367c:	4b2b      	ldr	r3, [pc, #172]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a2a      	ldr	r2, [pc, #168]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 8003682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003686:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003688:	4b28      	ldr	r3, [pc, #160]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4a27      	ldr	r2, [pc, #156]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 800368e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003692:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003694:	f7fd fd6c 	bl	8001170 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369c:	f7fd fd68 	bl	8001170 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e03a      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ae:	4b1f      	ldr	r3, [pc, #124]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x734>
 80036ba:	e032      	b.n	8003722 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	2b0c      	cmp	r3, #12
 80036c0:	d02d      	beq.n	800371e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c2:	4b1a      	ldr	r3, [pc, #104]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a19      	ldr	r2, [pc, #100]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 80036c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036cc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80036ce:	4b17      	ldr	r3, [pc, #92]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d105      	bne.n	80036e6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036da:	4b14      	ldr	r3, [pc, #80]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	4a13      	ldr	r2, [pc, #76]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 80036e0:	f023 0303 	bic.w	r3, r3, #3
 80036e4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036e6:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	4a10      	ldr	r2, [pc, #64]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 80036ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7fd fd3b 	bl	8001170 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fe:	f7fd fd37 	bl	8001170 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e009      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCC_OscConfig+0x7c4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f0      	bne.n	80036fe <HAL_RCC_OscConfig+0x796>
 800371c:	e001      	b.n	8003722 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3720      	adds	r7, #32
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40021000 	.word	0x40021000
 8003730:	f99d808c 	.word	0xf99d808c

08003734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0c8      	b.n	80038da <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003748:	4b66      	ldr	r3, [pc, #408]	; (80038e4 <HAL_RCC_ClockConfig+0x1b0>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d910      	bls.n	8003778 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b63      	ldr	r3, [pc, #396]	; (80038e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 0207 	bic.w	r2, r3, #7
 800375e:	4961      	ldr	r1, [pc, #388]	; (80038e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b5f      	ldr	r3, [pc, #380]	; (80038e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0b0      	b.n	80038da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d04c      	beq.n	800381e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d107      	bne.n	800379c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378c:	4b56      	ldr	r3, [pc, #344]	; (80038e8 <HAL_RCC_ClockConfig+0x1b4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d121      	bne.n	80037dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e09e      	b.n	80038da <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d107      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037a4:	4b50      	ldr	r3, [pc, #320]	; (80038e8 <HAL_RCC_ClockConfig+0x1b4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d115      	bne.n	80037dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e092      	b.n	80038da <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037bc:	4b4a      	ldr	r3, [pc, #296]	; (80038e8 <HAL_RCC_ClockConfig+0x1b4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e086      	b.n	80038da <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037cc:	4b46      	ldr	r3, [pc, #280]	; (80038e8 <HAL_RCC_ClockConfig+0x1b4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e07e      	b.n	80038da <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037dc:	4b42      	ldr	r3, [pc, #264]	; (80038e8 <HAL_RCC_ClockConfig+0x1b4>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f023 0203 	bic.w	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	493f      	ldr	r1, [pc, #252]	; (80038e8 <HAL_RCC_ClockConfig+0x1b4>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ee:	f7fd fcbf 	bl	8001170 <HAL_GetTick>
 80037f2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f4:	e00a      	b.n	800380c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f6:	f7fd fcbb 	bl	8001170 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f241 3288 	movw	r2, #5000	; 0x1388
 8003804:	4293      	cmp	r3, r2
 8003806:	d901      	bls.n	800380c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e066      	b.n	80038da <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380c:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <HAL_RCC_ClockConfig+0x1b4>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 020c 	and.w	r2, r3, #12
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	429a      	cmp	r2, r3
 800381c:	d1eb      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382a:	4b2f      	ldr	r3, [pc, #188]	; (80038e8 <HAL_RCC_ClockConfig+0x1b4>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	492c      	ldr	r1, [pc, #176]	; (80038e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003838:	4313      	orrs	r3, r2
 800383a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800383c:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <HAL_RCC_ClockConfig+0x1b0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d210      	bcs.n	800386c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384a:	4b26      	ldr	r3, [pc, #152]	; (80038e4 <HAL_RCC_ClockConfig+0x1b0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 0207 	bic.w	r2, r3, #7
 8003852:	4924      	ldr	r1, [pc, #144]	; (80038e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	4313      	orrs	r3, r2
 8003858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b22      	ldr	r3, [pc, #136]	; (80038e4 <HAL_RCC_ClockConfig+0x1b0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e036      	b.n	80038da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003878:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_RCC_ClockConfig+0x1b4>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4918      	ldr	r1, [pc, #96]	; (80038e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003896:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4910      	ldr	r1, [pc, #64]	; (80038e8 <HAL_RCC_ClockConfig+0x1b4>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038aa:	f000 f825 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 80038ae:	4601      	mov	r1, r0
 80038b0:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <HAL_RCC_ClockConfig+0x1b4>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	4a0c      	ldr	r2, [pc, #48]	; (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	5cd3      	ldrb	r3, [r2, r3]
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	fa21 f303 	lsr.w	r3, r1, r3
 80038c6:	4a0a      	ldr	r2, [pc, #40]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <HAL_RCC_ClockConfig+0x1c0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd fbfe 	bl	80010d0 <HAL_InitTick>
 80038d4:	4603      	mov	r3, r0
 80038d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80038d8:	7afb      	ldrb	r3, [r7, #11]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40022000 	.word	0x40022000
 80038e8:	40021000 	.word	0x40021000
 80038ec:	0800611c 	.word	0x0800611c
 80038f0:	2000000c 	.word	0x2000000c
 80038f4:	20000010 	.word	0x20000010

080038f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b089      	sub	sp, #36	; 0x24
 80038fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003906:	4b3d      	ldr	r3, [pc, #244]	; (80039fc <HAL_RCC_GetSysClockFreq+0x104>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003910:	4b3a      	ldr	r3, [pc, #232]	; (80039fc <HAL_RCC_GetSysClockFreq+0x104>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x34>
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b0c      	cmp	r3, #12
 8003924:	d121      	bne.n	800396a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d11e      	bne.n	800396a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800392c:	4b33      	ldr	r3, [pc, #204]	; (80039fc <HAL_RCC_GetSysClockFreq+0x104>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d107      	bne.n	8003948 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003938:	4b30      	ldr	r3, [pc, #192]	; (80039fc <HAL_RCC_GetSysClockFreq+0x104>)
 800393a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	e005      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003948:	4b2c      	ldr	r3, [pc, #176]	; (80039fc <HAL_RCC_GetSysClockFreq+0x104>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003954:	4a2a      	ldr	r2, [pc, #168]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10d      	bne.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003968:	e00a      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d102      	bne.n	8003976 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003970:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	e004      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d101      	bne.n	8003980 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800397c:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x110>)
 800397e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	2b0c      	cmp	r3, #12
 8003984:	d133      	bne.n	80039ee <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003986:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <HAL_RCC_GetSysClockFreq+0x104>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d002      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0xa4>
 8003996:	2b03      	cmp	r3, #3
 8003998:	d003      	beq.n	80039a2 <HAL_RCC_GetSysClockFreq+0xaa>
 800399a:	e005      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800399c:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x10c>)
 800399e:	617b      	str	r3, [r7, #20]
      break;
 80039a0:	e005      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039a2:	4b19      	ldr	r3, [pc, #100]	; (8003a08 <HAL_RCC_GetSysClockFreq+0x110>)
 80039a4:	617b      	str	r3, [r7, #20]
      break;
 80039a6:	e002      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	617b      	str	r3, [r7, #20]
      break;
 80039ac:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039ae:	4b13      	ldr	r3, [pc, #76]	; (80039fc <HAL_RCC_GetSysClockFreq+0x104>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	3301      	adds	r3, #1
 80039ba:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <HAL_RCC_GetSysClockFreq+0x104>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	fb02 f203 	mul.w	r2, r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039d4:	4b09      	ldr	r3, [pc, #36]	; (80039fc <HAL_RCC_GetSysClockFreq+0x104>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	0e5b      	lsrs	r3, r3, #25
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	3301      	adds	r3, #1
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039ee:	69bb      	ldr	r3, [r7, #24]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3724      	adds	r7, #36	; 0x24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40021000 	.word	0x40021000
 8003a00:	08006134 	.word	0x08006134
 8003a04:	00f42400 	.word	0x00f42400
 8003a08:	007a1200 	.word	0x007a1200

08003a0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a12:	681b      	ldr	r3, [r3, #0]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	2000000c 	.word	0x2000000c

08003a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a28:	f7ff fff0 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a2c:	4601      	mov	r1, r0
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	0a1b      	lsrs	r3, r3, #8
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a3a:	5cd3      	ldrb	r3, [r2, r3]
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	0800612c 	.word	0x0800612c

08003a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a54:	f7ff ffda 	bl	8003a0c <HAL_RCC_GetHCLKFreq>
 8003a58:	4601      	mov	r1, r0
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	0adb      	lsrs	r3, r3, #11
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	4a04      	ldr	r2, [pc, #16]	; (8003a78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a66:	5cd3      	ldrb	r3, [r2, r3]
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000
 8003a78:	0800612c 	.word	0x0800612c

08003a7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a88:	4b2a      	ldr	r3, [pc, #168]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a94:	f7ff fa04 	bl	8002ea0 <HAL_PWREx_GetVoltageRange>
 8003a98:	6178      	str	r0, [r7, #20]
 8003a9a:	e014      	b.n	8003ac6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a9c:	4b25      	ldr	r3, [pc, #148]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa0:	4a24      	ldr	r2, [pc, #144]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8003aa8:	4b22      	ldr	r3, [pc, #136]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ab4:	f7ff f9f4 	bl	8002ea0 <HAL_PWREx_GetVoltageRange>
 8003ab8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003aba:	4b1e      	ldr	r3, [pc, #120]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abe:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003acc:	d10b      	bne.n	8003ae6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b80      	cmp	r3, #128	; 0x80
 8003ad2:	d919      	bls.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ad8:	d902      	bls.n	8003ae0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ada:	2302      	movs	r3, #2
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	e013      	b.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	e010      	b.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b80      	cmp	r3, #128	; 0x80
 8003aea:	d902      	bls.n	8003af2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003aec:	2303      	movs	r3, #3
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	e00a      	b.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b80      	cmp	r3, #128	; 0x80
 8003af6:	d102      	bne.n	8003afe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003af8:	2302      	movs	r3, #2
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	e004      	b.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b70      	cmp	r3, #112	; 0x70
 8003b02:	d101      	bne.n	8003b08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b04:	2301      	movs	r3, #1
 8003b06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b08:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f023 0207 	bic.w	r2, r3, #7
 8003b10:	4909      	ldr	r1, [pc, #36]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b18:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d001      	beq.n	8003b2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40022000 	.word	0x40022000

08003b3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b44:	2300      	movs	r3, #0
 8003b46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b48:	2300      	movs	r3, #0
 8003b4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d03f      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b60:	d01c      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b66:	d802      	bhi.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00e      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003b6c:	e01f      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003b6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b72:	d003      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003b74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b78:	d01c      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003b7a:	e018      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b7c:	4b85      	ldr	r3, [pc, #532]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4a84      	ldr	r2, [pc, #528]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b88:	e015      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fab9 	bl	8004108 <RCCEx_PLLSAI1_Config>
 8003b96:	4603      	mov	r3, r0
 8003b98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b9a:	e00c      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3320      	adds	r3, #32
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fba0 	bl	80042e8 <RCCEx_PLLSAI2_Config>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bac:	e003      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	74fb      	strb	r3, [r7, #19]
      break;
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb6:	7cfb      	ldrb	r3, [r7, #19]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10b      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bbc:	4b75      	ldr	r3, [pc, #468]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bca:	4972      	ldr	r1, [pc, #456]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bd2:	e001      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d03f      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bec:	d01c      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003bee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bf2:	d802      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00e      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003bf8:	e01f      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003bfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bfe:	d003      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003c00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c04:	d01c      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003c06:	e018      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c08:	4b62      	ldr	r3, [pc, #392]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4a61      	ldr	r2, [pc, #388]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c14:	e015      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fa73 	bl	8004108 <RCCEx_PLLSAI1_Config>
 8003c22:	4603      	mov	r3, r0
 8003c24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c26:	e00c      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3320      	adds	r3, #32
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 fb5a 	bl	80042e8 <RCCEx_PLLSAI2_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c38:	e003      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c3e:	e000      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c42:	7cfb      	ldrb	r3, [r7, #19]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10b      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c48:	4b52      	ldr	r3, [pc, #328]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c56:	494f      	ldr	r1, [pc, #316]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c5e:	e001      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80a0 	beq.w	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c72:	2300      	movs	r3, #0
 8003c74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c76:	4b47      	ldr	r3, [pc, #284]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003c86:	2300      	movs	r3, #0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00d      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c8c:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c90:	4a40      	ldr	r2, [pc, #256]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c96:	6593      	str	r3, [r2, #88]	; 0x58
 8003c98:	4b3e      	ldr	r3, [pc, #248]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca8:	4b3b      	ldr	r3, [pc, #236]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a3a      	ldr	r2, [pc, #232]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cb4:	f7fd fa5c 	bl	8001170 <HAL_GetTick>
 8003cb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cba:	e009      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cbc:	f7fd fa58 	bl	8001170 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d902      	bls.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	74fb      	strb	r3, [r7, #19]
        break;
 8003cce:	e005      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cd0:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0ef      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d15c      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ce2:	4b2c      	ldr	r3, [pc, #176]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01f      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d019      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d00:	4b24      	ldr	r3, [pc, #144]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d0c:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	4a20      	ldr	r2, [pc, #128]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d1c:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d22:	4a1c      	ldr	r2, [pc, #112]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d2c:	4a19      	ldr	r2, [pc, #100]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d016      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3e:	f7fd fa17 	bl	8001170 <HAL_GetTick>
 8003d42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d44:	e00b      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d46:	f7fd fa13 	bl	8001170 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d902      	bls.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	74fb      	strb	r3, [r7, #19]
            break;
 8003d5c:	e006      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ec      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003d6c:	7cfb      	ldrb	r3, [r7, #19]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d72:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d82:	4904      	ldr	r1, [pc, #16]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d8a:	e009      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	74bb      	strb	r3, [r7, #18]
 8003d90:	e006      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
 8003d9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003da0:	7c7b      	ldrb	r3, [r7, #17]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d105      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da6:	4b9e      	ldr	r3, [pc, #632]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	4a9d      	ldr	r2, [pc, #628]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dbe:	4b98      	ldr	r3, [pc, #608]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc4:	f023 0203 	bic.w	r2, r3, #3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	4994      	ldr	r1, [pc, #592]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003de0:	4b8f      	ldr	r3, [pc, #572]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	f023 020c 	bic.w	r2, r3, #12
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	498c      	ldr	r1, [pc, #560]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e02:	4b87      	ldr	r3, [pc, #540]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	4983      	ldr	r1, [pc, #524]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e24:	4b7e      	ldr	r3, [pc, #504]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	497b      	ldr	r1, [pc, #492]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e46:	4b76      	ldr	r3, [pc, #472]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e54:	4972      	ldr	r1, [pc, #456]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e68:	4b6d      	ldr	r3, [pc, #436]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e76:	496a      	ldr	r1, [pc, #424]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e8a:	4b65      	ldr	r3, [pc, #404]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e98:	4961      	ldr	r1, [pc, #388]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eac:	4b5c      	ldr	r3, [pc, #368]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eba:	4959      	ldr	r1, [pc, #356]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ece:	4b54      	ldr	r3, [pc, #336]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003edc:	4950      	ldr	r1, [pc, #320]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ef0:	4b4b      	ldr	r3, [pc, #300]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efe:	4948      	ldr	r1, [pc, #288]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f12:	4b43      	ldr	r3, [pc, #268]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f20:	493f      	ldr	r1, [pc, #252]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d028      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f34:	4b3a      	ldr	r3, [pc, #232]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f42:	4937      	ldr	r1, [pc, #220]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f52:	d106      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f54:	4b32      	ldr	r3, [pc, #200]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4a31      	ldr	r2, [pc, #196]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f5e:	60d3      	str	r3, [r2, #12]
 8003f60:	e011      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f6a:	d10c      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	2101      	movs	r1, #1
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f8c8 	bl	8004108 <RCCEx_PLLSAI1_Config>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f7c:	7cfb      	ldrb	r3, [r7, #19]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d028      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f92:	4b23      	ldr	r3, [pc, #140]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	491f      	ldr	r1, [pc, #124]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fb0:	d106      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	4a1a      	ldr	r2, [pc, #104]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fbc:	60d3      	str	r3, [r2, #12]
 8003fbe:	e011      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	2101      	movs	r1, #1
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 f899 	bl	8004108 <RCCEx_PLLSAI1_Config>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d02b      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffe:	4908      	ldr	r1, [pc, #32]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800400e:	d109      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4a02      	ldr	r2, [pc, #8]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800401a:	60d3      	str	r3, [r2, #12]
 800401c:	e014      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800401e:	bf00      	nop
 8004020:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004028:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800402c:	d10c      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3304      	adds	r3, #4
 8004032:	2101      	movs	r1, #1
 8004034:	4618      	mov	r0, r3
 8004036:	f000 f867 	bl	8004108 <RCCEx_PLLSAI1_Config>
 800403a:	4603      	mov	r3, r0
 800403c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800403e:	7cfb      	ldrb	r3, [r7, #19]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004044:	7cfb      	ldrb	r3, [r7, #19]
 8004046:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d02f      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004054:	4b2b      	ldr	r3, [pc, #172]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004062:	4928      	ldr	r1, [pc, #160]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004072:	d10d      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3304      	adds	r3, #4
 8004078:	2102      	movs	r1, #2
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f844 	bl	8004108 <RCCEx_PLLSAI1_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d014      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800408a:	7cfb      	ldrb	r3, [r7, #19]
 800408c:	74bb      	strb	r3, [r7, #18]
 800408e:	e011      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004098:	d10c      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3320      	adds	r3, #32
 800409e:	2102      	movs	r1, #2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 f921 	bl	80042e8 <RCCEx_PLLSAI2_Config>
 80040a6:	4603      	mov	r3, r0
 80040a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040c0:	4b10      	ldr	r3, [pc, #64]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ce:	490d      	ldr	r1, [pc, #52]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00b      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040e2:	4b08      	ldr	r3, [pc, #32]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040f2:	4904      	ldr	r1, [pc, #16]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40021000 	.word	0x40021000

08004108 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004116:	4b73      	ldr	r3, [pc, #460]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d018      	beq.n	8004154 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004122:	4b70      	ldr	r3, [pc, #448]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0203 	and.w	r2, r3, #3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d10d      	bne.n	800414e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
       ||
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800413a:	4b6a      	ldr	r3, [pc, #424]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
       ||
 800414a:	429a      	cmp	r2, r3
 800414c:	d044      	beq.n	80041d8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]
 8004152:	e041      	b.n	80041d8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d00c      	beq.n	8004176 <RCCEx_PLLSAI1_Config+0x6e>
 800415c:	2b03      	cmp	r3, #3
 800415e:	d013      	beq.n	8004188 <RCCEx_PLLSAI1_Config+0x80>
 8004160:	2b01      	cmp	r3, #1
 8004162:	d120      	bne.n	80041a6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004164:	4b5f      	ldr	r3, [pc, #380]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d11d      	bne.n	80041ac <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004174:	e01a      	b.n	80041ac <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004176:	4b5b      	ldr	r3, [pc, #364]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417e:	2b00      	cmp	r3, #0
 8004180:	d116      	bne.n	80041b0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004186:	e013      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004188:	4b56      	ldr	r3, [pc, #344]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10f      	bne.n	80041b4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004194:	4b53      	ldr	r3, [pc, #332]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d109      	bne.n	80041b4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041a4:	e006      	b.n	80041b4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
      break;
 80041aa:	e004      	b.n	80041b6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80041ac:	bf00      	nop
 80041ae:	e002      	b.n	80041b6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80041b0:	bf00      	nop
 80041b2:	e000      	b.n	80041b6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80041b4:	bf00      	nop
    }

    if(status == HAL_OK)
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10d      	bne.n	80041d8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041bc:	4b49      	ldr	r3, [pc, #292]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6819      	ldr	r1, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	430b      	orrs	r3, r1
 80041d2:	4944      	ldr	r1, [pc, #272]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d17d      	bne.n	80042da <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041de:	4b41      	ldr	r3, [pc, #260]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a40      	ldr	r2, [pc, #256]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80041e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ea:	f7fc ffc1 	bl	8001170 <HAL_GetTick>
 80041ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041f0:	e009      	b.n	8004206 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041f2:	f7fc ffbd 	bl	8001170 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d902      	bls.n	8004206 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	73fb      	strb	r3, [r7, #15]
        break;
 8004204:	e005      	b.n	8004212 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004206:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1ef      	bne.n	80041f2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d160      	bne.n	80042da <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d111      	bne.n	8004242 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800421e:	4b31      	ldr	r3, [pc, #196]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6892      	ldr	r2, [r2, #8]
 800422e:	0211      	lsls	r1, r2, #8
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	68d2      	ldr	r2, [r2, #12]
 8004234:	0912      	lsrs	r2, r2, #4
 8004236:	0452      	lsls	r2, r2, #17
 8004238:	430a      	orrs	r2, r1
 800423a:	492a      	ldr	r1, [pc, #168]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800423c:	4313      	orrs	r3, r2
 800423e:	610b      	str	r3, [r1, #16]
 8004240:	e027      	b.n	8004292 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d112      	bne.n	800426e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004248:	4b26      	ldr	r3, [pc, #152]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004250:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6892      	ldr	r2, [r2, #8]
 8004258:	0211      	lsls	r1, r2, #8
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6912      	ldr	r2, [r2, #16]
 800425e:	0852      	lsrs	r2, r2, #1
 8004260:	3a01      	subs	r2, #1
 8004262:	0552      	lsls	r2, r2, #21
 8004264:	430a      	orrs	r2, r1
 8004266:	491f      	ldr	r1, [pc, #124]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004268:	4313      	orrs	r3, r2
 800426a:	610b      	str	r3, [r1, #16]
 800426c:	e011      	b.n	8004292 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800426e:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004276:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6892      	ldr	r2, [r2, #8]
 800427e:	0211      	lsls	r1, r2, #8
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6952      	ldr	r2, [r2, #20]
 8004284:	0852      	lsrs	r2, r2, #1
 8004286:	3a01      	subs	r2, #1
 8004288:	0652      	lsls	r2, r2, #25
 800428a:	430a      	orrs	r2, r1
 800428c:	4915      	ldr	r1, [pc, #84]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004298:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800429c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429e:	f7fc ff67 	bl	8001170 <HAL_GetTick>
 80042a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042a4:	e009      	b.n	80042ba <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042a6:	f7fc ff63 	bl	8001170 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d902      	bls.n	80042ba <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	73fb      	strb	r3, [r7, #15]
          break;
 80042b8:	e005      	b.n	80042c6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042ba:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0ef      	beq.n	80042a6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	4903      	ldr	r1, [pc, #12]	; (80042e4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042da:	7bfb      	ldrb	r3, [r7, #15]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40021000 	.word	0x40021000

080042e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042f6:	4b68      	ldr	r3, [pc, #416]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d018      	beq.n	8004334 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004302:	4b65      	ldr	r3, [pc, #404]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f003 0203 	and.w	r2, r3, #3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d10d      	bne.n	800432e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
       ||
 8004316:	2b00      	cmp	r3, #0
 8004318:	d009      	beq.n	800432e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800431a:	4b5f      	ldr	r3, [pc, #380]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
       ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d044      	beq.n	80043b8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
 8004332:	e041      	b.n	80043b8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b02      	cmp	r3, #2
 800433a:	d00c      	beq.n	8004356 <RCCEx_PLLSAI2_Config+0x6e>
 800433c:	2b03      	cmp	r3, #3
 800433e:	d013      	beq.n	8004368 <RCCEx_PLLSAI2_Config+0x80>
 8004340:	2b01      	cmp	r3, #1
 8004342:	d120      	bne.n	8004386 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004344:	4b54      	ldr	r3, [pc, #336]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d11d      	bne.n	800438c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004354:	e01a      	b.n	800438c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004356:	4b50      	ldr	r3, [pc, #320]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435e:	2b00      	cmp	r3, #0
 8004360:	d116      	bne.n	8004390 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004366:	e013      	b.n	8004390 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004368:	4b4b      	ldr	r3, [pc, #300]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10f      	bne.n	8004394 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004374:	4b48      	ldr	r3, [pc, #288]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d109      	bne.n	8004394 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004384:	e006      	b.n	8004394 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
      break;
 800438a:	e004      	b.n	8004396 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800438c:	bf00      	nop
 800438e:	e002      	b.n	8004396 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004390:	bf00      	nop
 8004392:	e000      	b.n	8004396 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004394:	bf00      	nop
    }

    if(status == HAL_OK)
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10d      	bne.n	80043b8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800439c:	4b3e      	ldr	r3, [pc, #248]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6819      	ldr	r1, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	430b      	orrs	r3, r1
 80043b2:	4939      	ldr	r1, [pc, #228]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d167      	bne.n	800448e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043be:	4b36      	ldr	r3, [pc, #216]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a35      	ldr	r2, [pc, #212]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ca:	f7fc fed1 	bl	8001170 <HAL_GetTick>
 80043ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043d0:	e009      	b.n	80043e6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043d2:	f7fc fecd 	bl	8001170 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d902      	bls.n	80043e6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	73fb      	strb	r3, [r7, #15]
        break;
 80043e4:	e005      	b.n	80043f2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043e6:	4b2c      	ldr	r3, [pc, #176]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1ef      	bne.n	80043d2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d14a      	bne.n	800448e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d111      	bne.n	8004422 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043fe:	4b26      	ldr	r3, [pc, #152]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6892      	ldr	r2, [r2, #8]
 800440e:	0211      	lsls	r1, r2, #8
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	68d2      	ldr	r2, [r2, #12]
 8004414:	0912      	lsrs	r2, r2, #4
 8004416:	0452      	lsls	r2, r2, #17
 8004418:	430a      	orrs	r2, r1
 800441a:	491f      	ldr	r1, [pc, #124]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 800441c:	4313      	orrs	r3, r2
 800441e:	614b      	str	r3, [r1, #20]
 8004420:	e011      	b.n	8004446 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004422:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800442a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6892      	ldr	r2, [r2, #8]
 8004432:	0211      	lsls	r1, r2, #8
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6912      	ldr	r2, [r2, #16]
 8004438:	0852      	lsrs	r2, r2, #1
 800443a:	3a01      	subs	r2, #1
 800443c:	0652      	lsls	r2, r2, #25
 800443e:	430a      	orrs	r2, r1
 8004440:	4915      	ldr	r1, [pc, #84]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004442:	4313      	orrs	r3, r2
 8004444:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004446:	4b14      	ldr	r3, [pc, #80]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a13      	ldr	r2, [pc, #76]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004450:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004452:	f7fc fe8d 	bl	8001170 <HAL_GetTick>
 8004456:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004458:	e009      	b.n	800446e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800445a:	f7fc fe89 	bl	8001170 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d902      	bls.n	800446e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	73fb      	strb	r3, [r7, #15]
          break;
 800446c:	e005      	b.n	800447a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800446e:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0ef      	beq.n	800445a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d106      	bne.n	800448e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004482:	695a      	ldr	r2, [r3, #20]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	4903      	ldr	r1, [pc, #12]	; (8004498 <RCCEx_PLLSAI2_Config+0x1b0>)
 800448a:	4313      	orrs	r3, r2
 800448c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800448e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40021000 	.word	0x40021000

0800449c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d001      	beq.n	80044b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e04f      	b.n	8004554 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a23      	ldr	r2, [pc, #140]	; (8004560 <HAL_TIM_Base_Start_IT+0xc4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d01d      	beq.n	8004512 <HAL_TIM_Base_Start_IT+0x76>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044de:	d018      	beq.n	8004512 <HAL_TIM_Base_Start_IT+0x76>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1f      	ldr	r2, [pc, #124]	; (8004564 <HAL_TIM_Base_Start_IT+0xc8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d013      	beq.n	8004512 <HAL_TIM_Base_Start_IT+0x76>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1e      	ldr	r2, [pc, #120]	; (8004568 <HAL_TIM_Base_Start_IT+0xcc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00e      	beq.n	8004512 <HAL_TIM_Base_Start_IT+0x76>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a1c      	ldr	r2, [pc, #112]	; (800456c <HAL_TIM_Base_Start_IT+0xd0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d009      	beq.n	8004512 <HAL_TIM_Base_Start_IT+0x76>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1b      	ldr	r2, [pc, #108]	; (8004570 <HAL_TIM_Base_Start_IT+0xd4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d004      	beq.n	8004512 <HAL_TIM_Base_Start_IT+0x76>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a19      	ldr	r2, [pc, #100]	; (8004574 <HAL_TIM_Base_Start_IT+0xd8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d115      	bne.n	800453e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	4b17      	ldr	r3, [pc, #92]	; (8004578 <HAL_TIM_Base_Start_IT+0xdc>)
 800451a:	4013      	ands	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b06      	cmp	r3, #6
 8004522:	d015      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0xb4>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452a:	d011      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453c:	e008      	b.n	8004550 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0201 	orr.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	e000      	b.n	8004552 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004550:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800
 800456c:	40000c00 	.word	0x40000c00
 8004570:	40013400 	.word	0x40013400
 8004574:	40014000 	.word	0x40014000
 8004578:	00010007 	.word	0x00010007

0800457c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e049      	b.n	8004622 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fc fc12 	bl	8000dcc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f000 fd00 	bl	8004fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e049      	b.n	80046d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d106      	bne.n	8004656 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7fc fbdf 	bl	8000e14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2202      	movs	r2, #2
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3304      	adds	r3, #4
 8004666:	4619      	mov	r1, r3
 8004668:	4610      	mov	r0, r2
 800466a:	f000 fca9 	bl	8004fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <HAL_TIM_PWM_Start+0x24>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e03c      	b.n	8004776 <HAL_TIM_PWM_Start+0x9e>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d109      	bne.n	8004716 <HAL_TIM_PWM_Start+0x3e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b01      	cmp	r3, #1
 800470c:	bf14      	ite	ne
 800470e:	2301      	movne	r3, #1
 8004710:	2300      	moveq	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	e02f      	b.n	8004776 <HAL_TIM_PWM_Start+0x9e>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b08      	cmp	r3, #8
 800471a:	d109      	bne.n	8004730 <HAL_TIM_PWM_Start+0x58>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	bf14      	ite	ne
 8004728:	2301      	movne	r3, #1
 800472a:	2300      	moveq	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	e022      	b.n	8004776 <HAL_TIM_PWM_Start+0x9e>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b0c      	cmp	r3, #12
 8004734:	d109      	bne.n	800474a <HAL_TIM_PWM_Start+0x72>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b01      	cmp	r3, #1
 8004740:	bf14      	ite	ne
 8004742:	2301      	movne	r3, #1
 8004744:	2300      	moveq	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	e015      	b.n	8004776 <HAL_TIM_PWM_Start+0x9e>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b10      	cmp	r3, #16
 800474e:	d109      	bne.n	8004764 <HAL_TIM_PWM_Start+0x8c>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	e008      	b.n	8004776 <HAL_TIM_PWM_Start+0x9e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e09c      	b.n	80048b8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d104      	bne.n	800478e <HAL_TIM_PWM_Start+0xb6>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800478c:	e023      	b.n	80047d6 <HAL_TIM_PWM_Start+0xfe>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b04      	cmp	r3, #4
 8004792:	d104      	bne.n	800479e <HAL_TIM_PWM_Start+0xc6>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800479c:	e01b      	b.n	80047d6 <HAL_TIM_PWM_Start+0xfe>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d104      	bne.n	80047ae <HAL_TIM_PWM_Start+0xd6>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ac:	e013      	b.n	80047d6 <HAL_TIM_PWM_Start+0xfe>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b0c      	cmp	r3, #12
 80047b2:	d104      	bne.n	80047be <HAL_TIM_PWM_Start+0xe6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047bc:	e00b      	b.n	80047d6 <HAL_TIM_PWM_Start+0xfe>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d104      	bne.n	80047ce <HAL_TIM_PWM_Start+0xf6>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047cc:	e003      	b.n	80047d6 <HAL_TIM_PWM_Start+0xfe>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2202      	movs	r2, #2
 80047d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2201      	movs	r2, #1
 80047dc:	6839      	ldr	r1, [r7, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 ff5e 	bl	80056a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a35      	ldr	r2, [pc, #212]	; (80048c0 <HAL_TIM_PWM_Start+0x1e8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <HAL_TIM_PWM_Start+0x13e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a34      	ldr	r2, [pc, #208]	; (80048c4 <HAL_TIM_PWM_Start+0x1ec>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00e      	beq.n	8004816 <HAL_TIM_PWM_Start+0x13e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a32      	ldr	r2, [pc, #200]	; (80048c8 <HAL_TIM_PWM_Start+0x1f0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d009      	beq.n	8004816 <HAL_TIM_PWM_Start+0x13e>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a31      	ldr	r2, [pc, #196]	; (80048cc <HAL_TIM_PWM_Start+0x1f4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d004      	beq.n	8004816 <HAL_TIM_PWM_Start+0x13e>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a2f      	ldr	r2, [pc, #188]	; (80048d0 <HAL_TIM_PWM_Start+0x1f8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d101      	bne.n	800481a <HAL_TIM_PWM_Start+0x142>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_TIM_PWM_Start+0x144>
 800481a:	2300      	movs	r3, #0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800482e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a22      	ldr	r2, [pc, #136]	; (80048c0 <HAL_TIM_PWM_Start+0x1e8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d01d      	beq.n	8004876 <HAL_TIM_PWM_Start+0x19e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004842:	d018      	beq.n	8004876 <HAL_TIM_PWM_Start+0x19e>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a22      	ldr	r2, [pc, #136]	; (80048d4 <HAL_TIM_PWM_Start+0x1fc>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <HAL_TIM_PWM_Start+0x19e>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a21      	ldr	r2, [pc, #132]	; (80048d8 <HAL_TIM_PWM_Start+0x200>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00e      	beq.n	8004876 <HAL_TIM_PWM_Start+0x19e>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1f      	ldr	r2, [pc, #124]	; (80048dc <HAL_TIM_PWM_Start+0x204>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d009      	beq.n	8004876 <HAL_TIM_PWM_Start+0x19e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a17      	ldr	r2, [pc, #92]	; (80048c4 <HAL_TIM_PWM_Start+0x1ec>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d004      	beq.n	8004876 <HAL_TIM_PWM_Start+0x19e>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a15      	ldr	r2, [pc, #84]	; (80048c8 <HAL_TIM_PWM_Start+0x1f0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d115      	bne.n	80048a2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <HAL_TIM_PWM_Start+0x208>)
 800487e:	4013      	ands	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b06      	cmp	r3, #6
 8004886:	d015      	beq.n	80048b4 <HAL_TIM_PWM_Start+0x1dc>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488e:	d011      	beq.n	80048b4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a0:	e008      	b.n	80048b4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0201 	orr.w	r2, r2, #1
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	e000      	b.n	80048b6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40012c00 	.word	0x40012c00
 80048c4:	40013400 	.word	0x40013400
 80048c8:	40014000 	.word	0x40014000
 80048cc:	40014400 	.word	0x40014400
 80048d0:	40014800 	.word	0x40014800
 80048d4:	40000400 	.word	0x40000400
 80048d8:	40000800 	.word	0x40000800
 80048dc:	40000c00 	.word	0x40000c00
 80048e0:	00010007 	.word	0x00010007

080048e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2200      	movs	r2, #0
 80048f4:	6839      	ldr	r1, [r7, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fed2 	bl	80056a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a3e      	ldr	r2, [pc, #248]	; (80049fc <HAL_TIM_PWM_Stop+0x118>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <HAL_TIM_PWM_Stop+0x4a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a3d      	ldr	r2, [pc, #244]	; (8004a00 <HAL_TIM_PWM_Stop+0x11c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <HAL_TIM_PWM_Stop+0x4a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a3b      	ldr	r2, [pc, #236]	; (8004a04 <HAL_TIM_PWM_Stop+0x120>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d009      	beq.n	800492e <HAL_TIM_PWM_Stop+0x4a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a3a      	ldr	r2, [pc, #232]	; (8004a08 <HAL_TIM_PWM_Stop+0x124>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_TIM_PWM_Stop+0x4a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a38      	ldr	r2, [pc, #224]	; (8004a0c <HAL_TIM_PWM_Stop+0x128>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d101      	bne.n	8004932 <HAL_TIM_PWM_Stop+0x4e>
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <HAL_TIM_PWM_Stop+0x50>
 8004932:	2300      	movs	r3, #0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d017      	beq.n	8004968 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6a1a      	ldr	r2, [r3, #32]
 800493e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004942:	4013      	ands	r3, r2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10f      	bne.n	8004968 <HAL_TIM_PWM_Stop+0x84>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6a1a      	ldr	r2, [r3, #32]
 800494e:	f240 4344 	movw	r3, #1092	; 0x444
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <HAL_TIM_PWM_Stop+0x84>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004966:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6a1a      	ldr	r2, [r3, #32]
 800496e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10f      	bne.n	8004998 <HAL_TIM_PWM_Stop+0xb4>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6a1a      	ldr	r2, [r3, #32]
 800497e:	f240 4344 	movw	r3, #1092	; 0x444
 8004982:	4013      	ands	r3, r2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d107      	bne.n	8004998 <HAL_TIM_PWM_Stop+0xb4>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0201 	bic.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d104      	bne.n	80049a8 <HAL_TIM_PWM_Stop+0xc4>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a6:	e023      	b.n	80049f0 <HAL_TIM_PWM_Stop+0x10c>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d104      	bne.n	80049b8 <HAL_TIM_PWM_Stop+0xd4>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b6:	e01b      	b.n	80049f0 <HAL_TIM_PWM_Stop+0x10c>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d104      	bne.n	80049c8 <HAL_TIM_PWM_Stop+0xe4>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c6:	e013      	b.n	80049f0 <HAL_TIM_PWM_Stop+0x10c>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b0c      	cmp	r3, #12
 80049cc:	d104      	bne.n	80049d8 <HAL_TIM_PWM_Stop+0xf4>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049d6:	e00b      	b.n	80049f0 <HAL_TIM_PWM_Stop+0x10c>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d104      	bne.n	80049e8 <HAL_TIM_PWM_Stop+0x104>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e6:	e003      	b.n	80049f0 <HAL_TIM_PWM_Stop+0x10c>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40012c00 	.word	0x40012c00
 8004a00:	40013400 	.word	0x40013400
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40014400 	.word	0x40014400
 8004a0c:	40014800 	.word	0x40014800

08004a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d122      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d11b      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0202 	mvn.w	r2, #2
 8004a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fa96 	bl	8004f84 <HAL_TIM_IC_CaptureCallback>
 8004a58:	e005      	b.n	8004a66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fa88 	bl	8004f70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fa99 	bl	8004f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d122      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d11b      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0204 	mvn.w	r2, #4
 8004a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fa6c 	bl	8004f84 <HAL_TIM_IC_CaptureCallback>
 8004aac:	e005      	b.n	8004aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fa5e 	bl	8004f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fa6f 	bl	8004f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d122      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d11b      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0208 	mvn.w	r2, #8
 8004ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2204      	movs	r2, #4
 8004aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa42 	bl	8004f84 <HAL_TIM_IC_CaptureCallback>
 8004b00:	e005      	b.n	8004b0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fa34 	bl	8004f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fa45 	bl	8004f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	2b10      	cmp	r3, #16
 8004b20:	d122      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d11b      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f06f 0210 	mvn.w	r2, #16
 8004b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fa18 	bl	8004f84 <HAL_TIM_IC_CaptureCallback>
 8004b54:	e005      	b.n	8004b62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fa0a 	bl	8004f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fa1b 	bl	8004f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d10e      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d107      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0201 	mvn.w	r2, #1
 8004b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f9e4 	bl	8004f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9e:	2b80      	cmp	r3, #128	; 0x80
 8004ba0:	d10e      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bac:	2b80      	cmp	r3, #128	; 0x80
 8004bae:	d107      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fe28 	bl	8005810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bce:	d10e      	bne.n	8004bee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b80      	cmp	r3, #128	; 0x80
 8004bdc:	d107      	bne.n	8004bee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fe1b 	bl	8005824 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	d10e      	bne.n	8004c1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c06:	2b40      	cmp	r3, #64	; 0x40
 8004c08:	d107      	bne.n	8004c1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f9c9 	bl	8004fac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d10e      	bne.n	8004c46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d107      	bne.n	8004c46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f06f 0220 	mvn.w	r2, #32
 8004c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fddb 	bl	80057fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_TIM_OC_ConfigChannel+0x1a>
 8004c66:	2302      	movs	r3, #2
 8004c68:	e064      	b.n	8004d34 <HAL_TIM_OC_ConfigChannel+0xe4>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b14      	cmp	r3, #20
 8004c76:	d857      	bhi.n	8004d28 <HAL_TIM_OC_ConfigChannel+0xd8>
 8004c78:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004cd5 	.word	0x08004cd5
 8004c84:	08004d29 	.word	0x08004d29
 8004c88:	08004d29 	.word	0x08004d29
 8004c8c:	08004d29 	.word	0x08004d29
 8004c90:	08004ce3 	.word	0x08004ce3
 8004c94:	08004d29 	.word	0x08004d29
 8004c98:	08004d29 	.word	0x08004d29
 8004c9c:	08004d29 	.word	0x08004d29
 8004ca0:	08004cf1 	.word	0x08004cf1
 8004ca4:	08004d29 	.word	0x08004d29
 8004ca8:	08004d29 	.word	0x08004d29
 8004cac:	08004d29 	.word	0x08004d29
 8004cb0:	08004cff 	.word	0x08004cff
 8004cb4:	08004d29 	.word	0x08004d29
 8004cb8:	08004d29 	.word	0x08004d29
 8004cbc:	08004d29 	.word	0x08004d29
 8004cc0:	08004d0d 	.word	0x08004d0d
 8004cc4:	08004d29 	.word	0x08004d29
 8004cc8:	08004d29 	.word	0x08004d29
 8004ccc:	08004d29 	.word	0x08004d29
 8004cd0:	08004d1b 	.word	0x08004d1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fa0a 	bl	80050f4 <TIM_OC1_SetConfig>
      break;
 8004ce0:	e023      	b.n	8004d2a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68b9      	ldr	r1, [r7, #8]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fa93 	bl	8005214 <TIM_OC2_SetConfig>
      break;
 8004cee:	e01c      	b.n	8004d2a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fb16 	bl	8005328 <TIM_OC3_SetConfig>
      break;
 8004cfc:	e015      	b.n	8004d2a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 fb97 	bl	8005438 <TIM_OC4_SetConfig>
      break;
 8004d0a:	e00e      	b.n	8004d2a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fbfa 	bl	800550c <TIM_OC5_SetConfig>
      break;
 8004d18:	e007      	b.n	8004d2a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fc57 	bl	80055d4 <TIM_OC6_SetConfig>
      break;
 8004d26:	e000      	b.n	8004d2a <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8004d28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d52:	2302      	movs	r3, #2
 8004d54:	e0fd      	b.n	8004f52 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b14      	cmp	r3, #20
 8004d62:	f200 80f0 	bhi.w	8004f46 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004d66:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6c:	08004dc1 	.word	0x08004dc1
 8004d70:	08004f47 	.word	0x08004f47
 8004d74:	08004f47 	.word	0x08004f47
 8004d78:	08004f47 	.word	0x08004f47
 8004d7c:	08004e01 	.word	0x08004e01
 8004d80:	08004f47 	.word	0x08004f47
 8004d84:	08004f47 	.word	0x08004f47
 8004d88:	08004f47 	.word	0x08004f47
 8004d8c:	08004e43 	.word	0x08004e43
 8004d90:	08004f47 	.word	0x08004f47
 8004d94:	08004f47 	.word	0x08004f47
 8004d98:	08004f47 	.word	0x08004f47
 8004d9c:	08004e83 	.word	0x08004e83
 8004da0:	08004f47 	.word	0x08004f47
 8004da4:	08004f47 	.word	0x08004f47
 8004da8:	08004f47 	.word	0x08004f47
 8004dac:	08004ec5 	.word	0x08004ec5
 8004db0:	08004f47 	.word	0x08004f47
 8004db4:	08004f47 	.word	0x08004f47
 8004db8:	08004f47 	.word	0x08004f47
 8004dbc:	08004f05 	.word	0x08004f05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 f994 	bl	80050f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0208 	orr.w	r2, r2, #8
 8004dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0204 	bic.w	r2, r2, #4
 8004dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6999      	ldr	r1, [r3, #24]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	619a      	str	r2, [r3, #24]
      break;
 8004dfe:	e0a3      	b.n	8004f48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68b9      	ldr	r1, [r7, #8]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fa04 	bl	8005214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699a      	ldr	r2, [r3, #24]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6999      	ldr	r1, [r3, #24]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	021a      	lsls	r2, r3, #8
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	619a      	str	r2, [r3, #24]
      break;
 8004e40:	e082      	b.n	8004f48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fa6d 	bl	8005328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0208 	orr.w	r2, r2, #8
 8004e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0204 	bic.w	r2, r2, #4
 8004e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69d9      	ldr	r1, [r3, #28]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	61da      	str	r2, [r3, #28]
      break;
 8004e80:	e062      	b.n	8004f48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68b9      	ldr	r1, [r7, #8]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fad5 	bl	8005438 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69da      	ldr	r2, [r3, #28]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69d9      	ldr	r1, [r3, #28]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	021a      	lsls	r2, r3, #8
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	61da      	str	r2, [r3, #28]
      break;
 8004ec2:	e041      	b.n	8004f48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fb1e 	bl	800550c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0208 	orr.w	r2, r2, #8
 8004ede:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0204 	bic.w	r2, r2, #4
 8004eee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f02:	e021      	b.n	8004f48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fb62 	bl	80055d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	021a      	lsls	r2, r3, #8
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004f44:	e000      	b.n	8004f48 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004f46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop

08004f5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a40      	ldr	r2, [pc, #256]	; (80050d4 <TIM_Base_SetConfig+0x114>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d013      	beq.n	8005000 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fde:	d00f      	beq.n	8005000 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a3d      	ldr	r2, [pc, #244]	; (80050d8 <TIM_Base_SetConfig+0x118>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00b      	beq.n	8005000 <TIM_Base_SetConfig+0x40>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a3c      	ldr	r2, [pc, #240]	; (80050dc <TIM_Base_SetConfig+0x11c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d007      	beq.n	8005000 <TIM_Base_SetConfig+0x40>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a3b      	ldr	r2, [pc, #236]	; (80050e0 <TIM_Base_SetConfig+0x120>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d003      	beq.n	8005000 <TIM_Base_SetConfig+0x40>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a3a      	ldr	r2, [pc, #232]	; (80050e4 <TIM_Base_SetConfig+0x124>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d108      	bne.n	8005012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a2f      	ldr	r2, [pc, #188]	; (80050d4 <TIM_Base_SetConfig+0x114>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d01f      	beq.n	800505a <TIM_Base_SetConfig+0x9a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005020:	d01b      	beq.n	800505a <TIM_Base_SetConfig+0x9a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a2c      	ldr	r2, [pc, #176]	; (80050d8 <TIM_Base_SetConfig+0x118>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d017      	beq.n	800505a <TIM_Base_SetConfig+0x9a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a2b      	ldr	r2, [pc, #172]	; (80050dc <TIM_Base_SetConfig+0x11c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <TIM_Base_SetConfig+0x9a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a2a      	ldr	r2, [pc, #168]	; (80050e0 <TIM_Base_SetConfig+0x120>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00f      	beq.n	800505a <TIM_Base_SetConfig+0x9a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a29      	ldr	r2, [pc, #164]	; (80050e4 <TIM_Base_SetConfig+0x124>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00b      	beq.n	800505a <TIM_Base_SetConfig+0x9a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a28      	ldr	r2, [pc, #160]	; (80050e8 <TIM_Base_SetConfig+0x128>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d007      	beq.n	800505a <TIM_Base_SetConfig+0x9a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a27      	ldr	r2, [pc, #156]	; (80050ec <TIM_Base_SetConfig+0x12c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d003      	beq.n	800505a <TIM_Base_SetConfig+0x9a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a26      	ldr	r2, [pc, #152]	; (80050f0 <TIM_Base_SetConfig+0x130>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d108      	bne.n	800506c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4313      	orrs	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a10      	ldr	r2, [pc, #64]	; (80050d4 <TIM_Base_SetConfig+0x114>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00f      	beq.n	80050b8 <TIM_Base_SetConfig+0xf8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a12      	ldr	r2, [pc, #72]	; (80050e4 <TIM_Base_SetConfig+0x124>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00b      	beq.n	80050b8 <TIM_Base_SetConfig+0xf8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a11      	ldr	r2, [pc, #68]	; (80050e8 <TIM_Base_SetConfig+0x128>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_Base_SetConfig+0xf8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a10      	ldr	r2, [pc, #64]	; (80050ec <TIM_Base_SetConfig+0x12c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_Base_SetConfig+0xf8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a0f      	ldr	r2, [pc, #60]	; (80050f0 <TIM_Base_SetConfig+0x130>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d103      	bne.n	80050c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	615a      	str	r2, [r3, #20]
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40012c00 	.word	0x40012c00
 80050d8:	40000400 	.word	0x40000400
 80050dc:	40000800 	.word	0x40000800
 80050e0:	40000c00 	.word	0x40000c00
 80050e4:	40013400 	.word	0x40013400
 80050e8:	40014000 	.word	0x40014000
 80050ec:	40014400 	.word	0x40014400
 80050f0:	40014800 	.word	0x40014800

080050f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	f023 0201 	bic.w	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0303 	bic.w	r3, r3, #3
 800512e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f023 0302 	bic.w	r3, r3, #2
 8005140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a2c      	ldr	r2, [pc, #176]	; (8005200 <TIM_OC1_SetConfig+0x10c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00f      	beq.n	8005174 <TIM_OC1_SetConfig+0x80>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a2b      	ldr	r2, [pc, #172]	; (8005204 <TIM_OC1_SetConfig+0x110>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00b      	beq.n	8005174 <TIM_OC1_SetConfig+0x80>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a2a      	ldr	r2, [pc, #168]	; (8005208 <TIM_OC1_SetConfig+0x114>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d007      	beq.n	8005174 <TIM_OC1_SetConfig+0x80>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a29      	ldr	r2, [pc, #164]	; (800520c <TIM_OC1_SetConfig+0x118>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d003      	beq.n	8005174 <TIM_OC1_SetConfig+0x80>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a28      	ldr	r2, [pc, #160]	; (8005210 <TIM_OC1_SetConfig+0x11c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d10c      	bne.n	800518e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f023 0308 	bic.w	r3, r3, #8
 800517a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f023 0304 	bic.w	r3, r3, #4
 800518c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1b      	ldr	r2, [pc, #108]	; (8005200 <TIM_OC1_SetConfig+0x10c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00f      	beq.n	80051b6 <TIM_OC1_SetConfig+0xc2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1a      	ldr	r2, [pc, #104]	; (8005204 <TIM_OC1_SetConfig+0x110>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00b      	beq.n	80051b6 <TIM_OC1_SetConfig+0xc2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a19      	ldr	r2, [pc, #100]	; (8005208 <TIM_OC1_SetConfig+0x114>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <TIM_OC1_SetConfig+0xc2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a18      	ldr	r2, [pc, #96]	; (800520c <TIM_OC1_SetConfig+0x118>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_OC1_SetConfig+0xc2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a17      	ldr	r2, [pc, #92]	; (8005210 <TIM_OC1_SetConfig+0x11c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d111      	bne.n	80051da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	621a      	str	r2, [r3, #32]
}
 80051f4:	bf00      	nop
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40013400 	.word	0x40013400
 8005208:	40014000 	.word	0x40014000
 800520c:	40014400 	.word	0x40014400
 8005210:	40014800 	.word	0x40014800

08005214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f023 0210 	bic.w	r2, r3, #16
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0320 	bic.w	r3, r3, #32
 8005262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a28      	ldr	r2, [pc, #160]	; (8005314 <TIM_OC2_SetConfig+0x100>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_OC2_SetConfig+0x6c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a27      	ldr	r2, [pc, #156]	; (8005318 <TIM_OC2_SetConfig+0x104>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d10d      	bne.n	800529c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800529a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a1d      	ldr	r2, [pc, #116]	; (8005314 <TIM_OC2_SetConfig+0x100>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00f      	beq.n	80052c4 <TIM_OC2_SetConfig+0xb0>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a1c      	ldr	r2, [pc, #112]	; (8005318 <TIM_OC2_SetConfig+0x104>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00b      	beq.n	80052c4 <TIM_OC2_SetConfig+0xb0>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a1b      	ldr	r2, [pc, #108]	; (800531c <TIM_OC2_SetConfig+0x108>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d007      	beq.n	80052c4 <TIM_OC2_SetConfig+0xb0>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a1a      	ldr	r2, [pc, #104]	; (8005320 <TIM_OC2_SetConfig+0x10c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d003      	beq.n	80052c4 <TIM_OC2_SetConfig+0xb0>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a19      	ldr	r2, [pc, #100]	; (8005324 <TIM_OC2_SetConfig+0x110>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d113      	bne.n	80052ec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40012c00 	.word	0x40012c00
 8005318:	40013400 	.word	0x40013400
 800531c:	40014000 	.word	0x40014000
 8005320:	40014400 	.word	0x40014400
 8005324:	40014800 	.word	0x40014800

08005328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0303 	bic.w	r3, r3, #3
 8005362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a27      	ldr	r2, [pc, #156]	; (8005424 <TIM_OC3_SetConfig+0xfc>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d003      	beq.n	8005392 <TIM_OC3_SetConfig+0x6a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a26      	ldr	r2, [pc, #152]	; (8005428 <TIM_OC3_SetConfig+0x100>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d10d      	bne.n	80053ae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1c      	ldr	r2, [pc, #112]	; (8005424 <TIM_OC3_SetConfig+0xfc>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00f      	beq.n	80053d6 <TIM_OC3_SetConfig+0xae>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1b      	ldr	r2, [pc, #108]	; (8005428 <TIM_OC3_SetConfig+0x100>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00b      	beq.n	80053d6 <TIM_OC3_SetConfig+0xae>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1a      	ldr	r2, [pc, #104]	; (800542c <TIM_OC3_SetConfig+0x104>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d007      	beq.n	80053d6 <TIM_OC3_SetConfig+0xae>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a19      	ldr	r2, [pc, #100]	; (8005430 <TIM_OC3_SetConfig+0x108>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d003      	beq.n	80053d6 <TIM_OC3_SetConfig+0xae>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a18      	ldr	r2, [pc, #96]	; (8005434 <TIM_OC3_SetConfig+0x10c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d113      	bne.n	80053fe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	621a      	str	r2, [r3, #32]
}
 8005418:	bf00      	nop
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40012c00 	.word	0x40012c00
 8005428:	40013400 	.word	0x40013400
 800542c:	40014000 	.word	0x40014000
 8005430:	40014400 	.word	0x40014400
 8005434:	40014800 	.word	0x40014800

08005438 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	031b      	lsls	r3, r3, #12
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a18      	ldr	r2, [pc, #96]	; (80054f8 <TIM_OC4_SetConfig+0xc0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00f      	beq.n	80054bc <TIM_OC4_SetConfig+0x84>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a17      	ldr	r2, [pc, #92]	; (80054fc <TIM_OC4_SetConfig+0xc4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00b      	beq.n	80054bc <TIM_OC4_SetConfig+0x84>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a16      	ldr	r2, [pc, #88]	; (8005500 <TIM_OC4_SetConfig+0xc8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d007      	beq.n	80054bc <TIM_OC4_SetConfig+0x84>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a15      	ldr	r2, [pc, #84]	; (8005504 <TIM_OC4_SetConfig+0xcc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <TIM_OC4_SetConfig+0x84>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a14      	ldr	r2, [pc, #80]	; (8005508 <TIM_OC4_SetConfig+0xd0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d109      	bne.n	80054d0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	019b      	lsls	r3, r3, #6
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	621a      	str	r2, [r3, #32]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40012c00 	.word	0x40012c00
 80054fc:	40013400 	.word	0x40013400
 8005500:	40014000 	.word	0x40014000
 8005504:	40014400 	.word	0x40014400
 8005508:	40014800 	.word	0x40014800

0800550c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005550:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	041b      	lsls	r3, r3, #16
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a17      	ldr	r2, [pc, #92]	; (80055c0 <TIM_OC5_SetConfig+0xb4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00f      	beq.n	8005586 <TIM_OC5_SetConfig+0x7a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a16      	ldr	r2, [pc, #88]	; (80055c4 <TIM_OC5_SetConfig+0xb8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00b      	beq.n	8005586 <TIM_OC5_SetConfig+0x7a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <TIM_OC5_SetConfig+0xbc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d007      	beq.n	8005586 <TIM_OC5_SetConfig+0x7a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a14      	ldr	r2, [pc, #80]	; (80055cc <TIM_OC5_SetConfig+0xc0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d003      	beq.n	8005586 <TIM_OC5_SetConfig+0x7a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <TIM_OC5_SetConfig+0xc4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d109      	bne.n	800559a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	021b      	lsls	r3, r3, #8
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	621a      	str	r2, [r3, #32]
}
 80055b4:	bf00      	nop
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	40012c00 	.word	0x40012c00
 80055c4:	40013400 	.word	0x40013400
 80055c8:	40014000 	.word	0x40014000
 80055cc:	40014400 	.word	0x40014400
 80055d0:	40014800 	.word	0x40014800

080055d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	021b      	lsls	r3, r3, #8
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800561a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	051b      	lsls	r3, r3, #20
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a18      	ldr	r2, [pc, #96]	; (800568c <TIM_OC6_SetConfig+0xb8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00f      	beq.n	8005650 <TIM_OC6_SetConfig+0x7c>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a17      	ldr	r2, [pc, #92]	; (8005690 <TIM_OC6_SetConfig+0xbc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00b      	beq.n	8005650 <TIM_OC6_SetConfig+0x7c>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a16      	ldr	r2, [pc, #88]	; (8005694 <TIM_OC6_SetConfig+0xc0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d007      	beq.n	8005650 <TIM_OC6_SetConfig+0x7c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a15      	ldr	r2, [pc, #84]	; (8005698 <TIM_OC6_SetConfig+0xc4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_OC6_SetConfig+0x7c>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a14      	ldr	r2, [pc, #80]	; (800569c <TIM_OC6_SetConfig+0xc8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d109      	bne.n	8005664 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005656:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	029b      	lsls	r3, r3, #10
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	621a      	str	r2, [r3, #32]
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40012c00 	.word	0x40012c00
 8005690:	40013400 	.word	0x40013400
 8005694:	40014000 	.word	0x40014000
 8005698:	40014400 	.word	0x40014400
 800569c:	40014800 	.word	0x40014800

080056a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	2201      	movs	r2, #1
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1a      	ldr	r2, [r3, #32]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	401a      	ands	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1a      	ldr	r2, [r3, #32]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	fa01 f303 	lsl.w	r3, r1, r3
 80056d8:	431a      	orrs	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
	...

080056ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005700:	2302      	movs	r3, #2
 8005702:	e068      	b.n	80057d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a2e      	ldr	r2, [pc, #184]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d004      	beq.n	8005738 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a2d      	ldr	r2, [pc, #180]	; (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d108      	bne.n	800574a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800573e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005750:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1e      	ldr	r2, [pc, #120]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d01d      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005776:	d018      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1b      	ldr	r2, [pc, #108]	; (80057ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d013      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1a      	ldr	r2, [pc, #104]	; (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00e      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a18      	ldr	r2, [pc, #96]	; (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d009      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a13      	ldr	r2, [pc, #76]	; (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d004      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a14      	ldr	r2, [pc, #80]	; (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d10c      	bne.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40012c00 	.word	0x40012c00
 80057e8:	40013400 	.word	0x40013400
 80057ec:	40000400 	.word	0x40000400
 80057f0:	40000800 	.word	0x40000800
 80057f4:	40000c00 	.word	0x40000c00
 80057f8:	40014000 	.word	0x40014000

080057fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e040      	b.n	80058cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fb fb32 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2224      	movs	r2, #36	; 0x24
 8005864:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0201 	bic.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f82c 	bl	80058d4 <UART_SetConfig>
 800587c:	4603      	mov	r3, r0
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e022      	b.n	80058cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 faaa 	bl	8005de8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0201 	orr.w	r2, r2, #1
 80058c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fb31 	bl	8005f2c <UART_CheckIdleState>
 80058ca:	4603      	mov	r3, r0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058d4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80058d8:	b088      	sub	sp, #32
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	4bac      	ldr	r3, [pc, #688]	; (8005bb4 <UART_SetConfig+0x2e0>)
 8005902:	4013      	ands	r3, r2
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6812      	ldr	r2, [r2, #0]
 8005908:	69f9      	ldr	r1, [r7, #28]
 800590a:	430b      	orrs	r3, r1
 800590c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4aa2      	ldr	r2, [pc, #648]	; (8005bb8 <UART_SetConfig+0x2e4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d004      	beq.n	800593e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	4313      	orrs	r3, r2
 800593c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	430a      	orrs	r2, r1
 8005950:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a99      	ldr	r2, [pc, #612]	; (8005bbc <UART_SetConfig+0x2e8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d121      	bne.n	80059a0 <UART_SetConfig+0xcc>
 800595c:	4b98      	ldr	r3, [pc, #608]	; (8005bc0 <UART_SetConfig+0x2ec>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	2b03      	cmp	r3, #3
 8005968:	d816      	bhi.n	8005998 <UART_SetConfig+0xc4>
 800596a:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <UART_SetConfig+0x9c>)
 800596c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005970:	08005981 	.word	0x08005981
 8005974:	0800598d 	.word	0x0800598d
 8005978:	08005987 	.word	0x08005987
 800597c:	08005993 	.word	0x08005993
 8005980:	2301      	movs	r3, #1
 8005982:	76fb      	strb	r3, [r7, #27]
 8005984:	e0e8      	b.n	8005b58 <UART_SetConfig+0x284>
 8005986:	2302      	movs	r3, #2
 8005988:	76fb      	strb	r3, [r7, #27]
 800598a:	e0e5      	b.n	8005b58 <UART_SetConfig+0x284>
 800598c:	2304      	movs	r3, #4
 800598e:	76fb      	strb	r3, [r7, #27]
 8005990:	e0e2      	b.n	8005b58 <UART_SetConfig+0x284>
 8005992:	2308      	movs	r3, #8
 8005994:	76fb      	strb	r3, [r7, #27]
 8005996:	e0df      	b.n	8005b58 <UART_SetConfig+0x284>
 8005998:	2310      	movs	r3, #16
 800599a:	76fb      	strb	r3, [r7, #27]
 800599c:	bf00      	nop
 800599e:	e0db      	b.n	8005b58 <UART_SetConfig+0x284>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a87      	ldr	r2, [pc, #540]	; (8005bc4 <UART_SetConfig+0x2f0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d134      	bne.n	8005a14 <UART_SetConfig+0x140>
 80059aa:	4b85      	ldr	r3, [pc, #532]	; (8005bc0 <UART_SetConfig+0x2ec>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b0:	f003 030c 	and.w	r3, r3, #12
 80059b4:	2b0c      	cmp	r3, #12
 80059b6:	d829      	bhi.n	8005a0c <UART_SetConfig+0x138>
 80059b8:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <UART_SetConfig+0xec>)
 80059ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059be:	bf00      	nop
 80059c0:	080059f5 	.word	0x080059f5
 80059c4:	08005a0d 	.word	0x08005a0d
 80059c8:	08005a0d 	.word	0x08005a0d
 80059cc:	08005a0d 	.word	0x08005a0d
 80059d0:	08005a01 	.word	0x08005a01
 80059d4:	08005a0d 	.word	0x08005a0d
 80059d8:	08005a0d 	.word	0x08005a0d
 80059dc:	08005a0d 	.word	0x08005a0d
 80059e0:	080059fb 	.word	0x080059fb
 80059e4:	08005a0d 	.word	0x08005a0d
 80059e8:	08005a0d 	.word	0x08005a0d
 80059ec:	08005a0d 	.word	0x08005a0d
 80059f0:	08005a07 	.word	0x08005a07
 80059f4:	2300      	movs	r3, #0
 80059f6:	76fb      	strb	r3, [r7, #27]
 80059f8:	e0ae      	b.n	8005b58 <UART_SetConfig+0x284>
 80059fa:	2302      	movs	r3, #2
 80059fc:	76fb      	strb	r3, [r7, #27]
 80059fe:	e0ab      	b.n	8005b58 <UART_SetConfig+0x284>
 8005a00:	2304      	movs	r3, #4
 8005a02:	76fb      	strb	r3, [r7, #27]
 8005a04:	e0a8      	b.n	8005b58 <UART_SetConfig+0x284>
 8005a06:	2308      	movs	r3, #8
 8005a08:	76fb      	strb	r3, [r7, #27]
 8005a0a:	e0a5      	b.n	8005b58 <UART_SetConfig+0x284>
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	76fb      	strb	r3, [r7, #27]
 8005a10:	bf00      	nop
 8005a12:	e0a1      	b.n	8005b58 <UART_SetConfig+0x284>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a6b      	ldr	r2, [pc, #428]	; (8005bc8 <UART_SetConfig+0x2f4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d120      	bne.n	8005a60 <UART_SetConfig+0x18c>
 8005a1e:	4b68      	ldr	r3, [pc, #416]	; (8005bc0 <UART_SetConfig+0x2ec>)
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a28:	2b10      	cmp	r3, #16
 8005a2a:	d00f      	beq.n	8005a4c <UART_SetConfig+0x178>
 8005a2c:	2b10      	cmp	r3, #16
 8005a2e:	d802      	bhi.n	8005a36 <UART_SetConfig+0x162>
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <UART_SetConfig+0x16c>
 8005a34:	e010      	b.n	8005a58 <UART_SetConfig+0x184>
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d005      	beq.n	8005a46 <UART_SetConfig+0x172>
 8005a3a:	2b30      	cmp	r3, #48	; 0x30
 8005a3c:	d009      	beq.n	8005a52 <UART_SetConfig+0x17e>
 8005a3e:	e00b      	b.n	8005a58 <UART_SetConfig+0x184>
 8005a40:	2300      	movs	r3, #0
 8005a42:	76fb      	strb	r3, [r7, #27]
 8005a44:	e088      	b.n	8005b58 <UART_SetConfig+0x284>
 8005a46:	2302      	movs	r3, #2
 8005a48:	76fb      	strb	r3, [r7, #27]
 8005a4a:	e085      	b.n	8005b58 <UART_SetConfig+0x284>
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	76fb      	strb	r3, [r7, #27]
 8005a50:	e082      	b.n	8005b58 <UART_SetConfig+0x284>
 8005a52:	2308      	movs	r3, #8
 8005a54:	76fb      	strb	r3, [r7, #27]
 8005a56:	e07f      	b.n	8005b58 <UART_SetConfig+0x284>
 8005a58:	2310      	movs	r3, #16
 8005a5a:	76fb      	strb	r3, [r7, #27]
 8005a5c:	bf00      	nop
 8005a5e:	e07b      	b.n	8005b58 <UART_SetConfig+0x284>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a59      	ldr	r2, [pc, #356]	; (8005bcc <UART_SetConfig+0x2f8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d120      	bne.n	8005aac <UART_SetConfig+0x1d8>
 8005a6a:	4b55      	ldr	r3, [pc, #340]	; (8005bc0 <UART_SetConfig+0x2ec>)
 8005a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a74:	2b40      	cmp	r3, #64	; 0x40
 8005a76:	d00f      	beq.n	8005a98 <UART_SetConfig+0x1c4>
 8005a78:	2b40      	cmp	r3, #64	; 0x40
 8005a7a:	d802      	bhi.n	8005a82 <UART_SetConfig+0x1ae>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <UART_SetConfig+0x1b8>
 8005a80:	e010      	b.n	8005aa4 <UART_SetConfig+0x1d0>
 8005a82:	2b80      	cmp	r3, #128	; 0x80
 8005a84:	d005      	beq.n	8005a92 <UART_SetConfig+0x1be>
 8005a86:	2bc0      	cmp	r3, #192	; 0xc0
 8005a88:	d009      	beq.n	8005a9e <UART_SetConfig+0x1ca>
 8005a8a:	e00b      	b.n	8005aa4 <UART_SetConfig+0x1d0>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	76fb      	strb	r3, [r7, #27]
 8005a90:	e062      	b.n	8005b58 <UART_SetConfig+0x284>
 8005a92:	2302      	movs	r3, #2
 8005a94:	76fb      	strb	r3, [r7, #27]
 8005a96:	e05f      	b.n	8005b58 <UART_SetConfig+0x284>
 8005a98:	2304      	movs	r3, #4
 8005a9a:	76fb      	strb	r3, [r7, #27]
 8005a9c:	e05c      	b.n	8005b58 <UART_SetConfig+0x284>
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	76fb      	strb	r3, [r7, #27]
 8005aa2:	e059      	b.n	8005b58 <UART_SetConfig+0x284>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	76fb      	strb	r3, [r7, #27]
 8005aa8:	bf00      	nop
 8005aaa:	e055      	b.n	8005b58 <UART_SetConfig+0x284>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a47      	ldr	r2, [pc, #284]	; (8005bd0 <UART_SetConfig+0x2fc>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d124      	bne.n	8005b00 <UART_SetConfig+0x22c>
 8005ab6:	4b42      	ldr	r3, [pc, #264]	; (8005bc0 <UART_SetConfig+0x2ec>)
 8005ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac4:	d012      	beq.n	8005aec <UART_SetConfig+0x218>
 8005ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aca:	d802      	bhi.n	8005ad2 <UART_SetConfig+0x1fe>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d007      	beq.n	8005ae0 <UART_SetConfig+0x20c>
 8005ad0:	e012      	b.n	8005af8 <UART_SetConfig+0x224>
 8005ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad6:	d006      	beq.n	8005ae6 <UART_SetConfig+0x212>
 8005ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005adc:	d009      	beq.n	8005af2 <UART_SetConfig+0x21e>
 8005ade:	e00b      	b.n	8005af8 <UART_SetConfig+0x224>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	76fb      	strb	r3, [r7, #27]
 8005ae4:	e038      	b.n	8005b58 <UART_SetConfig+0x284>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	76fb      	strb	r3, [r7, #27]
 8005aea:	e035      	b.n	8005b58 <UART_SetConfig+0x284>
 8005aec:	2304      	movs	r3, #4
 8005aee:	76fb      	strb	r3, [r7, #27]
 8005af0:	e032      	b.n	8005b58 <UART_SetConfig+0x284>
 8005af2:	2308      	movs	r3, #8
 8005af4:	76fb      	strb	r3, [r7, #27]
 8005af6:	e02f      	b.n	8005b58 <UART_SetConfig+0x284>
 8005af8:	2310      	movs	r3, #16
 8005afa:	76fb      	strb	r3, [r7, #27]
 8005afc:	bf00      	nop
 8005afe:	e02b      	b.n	8005b58 <UART_SetConfig+0x284>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a2c      	ldr	r2, [pc, #176]	; (8005bb8 <UART_SetConfig+0x2e4>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d124      	bne.n	8005b54 <UART_SetConfig+0x280>
 8005b0a:	4b2d      	ldr	r3, [pc, #180]	; (8005bc0 <UART_SetConfig+0x2ec>)
 8005b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b18:	d012      	beq.n	8005b40 <UART_SetConfig+0x26c>
 8005b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1e:	d802      	bhi.n	8005b26 <UART_SetConfig+0x252>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d007      	beq.n	8005b34 <UART_SetConfig+0x260>
 8005b24:	e012      	b.n	8005b4c <UART_SetConfig+0x278>
 8005b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b2a:	d006      	beq.n	8005b3a <UART_SetConfig+0x266>
 8005b2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b30:	d009      	beq.n	8005b46 <UART_SetConfig+0x272>
 8005b32:	e00b      	b.n	8005b4c <UART_SetConfig+0x278>
 8005b34:	2300      	movs	r3, #0
 8005b36:	76fb      	strb	r3, [r7, #27]
 8005b38:	e00e      	b.n	8005b58 <UART_SetConfig+0x284>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	76fb      	strb	r3, [r7, #27]
 8005b3e:	e00b      	b.n	8005b58 <UART_SetConfig+0x284>
 8005b40:	2304      	movs	r3, #4
 8005b42:	76fb      	strb	r3, [r7, #27]
 8005b44:	e008      	b.n	8005b58 <UART_SetConfig+0x284>
 8005b46:	2308      	movs	r3, #8
 8005b48:	76fb      	strb	r3, [r7, #27]
 8005b4a:	e005      	b.n	8005b58 <UART_SetConfig+0x284>
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	76fb      	strb	r3, [r7, #27]
 8005b50:	bf00      	nop
 8005b52:	e001      	b.n	8005b58 <UART_SetConfig+0x284>
 8005b54:	2310      	movs	r3, #16
 8005b56:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a16      	ldr	r2, [pc, #88]	; (8005bb8 <UART_SetConfig+0x2e4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	f040 8087 	bne.w	8005c72 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b64:	7efb      	ldrb	r3, [r7, #27]
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d836      	bhi.n	8005bd8 <UART_SetConfig+0x304>
 8005b6a:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <UART_SetConfig+0x29c>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005b95 	.word	0x08005b95
 8005b74:	08005bd9 	.word	0x08005bd9
 8005b78:	08005b9d 	.word	0x08005b9d
 8005b7c:	08005bd9 	.word	0x08005bd9
 8005b80:	08005ba3 	.word	0x08005ba3
 8005b84:	08005bd9 	.word	0x08005bd9
 8005b88:	08005bd9 	.word	0x08005bd9
 8005b8c:	08005bd9 	.word	0x08005bd9
 8005b90:	08005bab 	.word	0x08005bab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b94:	f7fd ff46 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 8005b98:	6178      	str	r0, [r7, #20]
        break;
 8005b9a:	e022      	b.n	8005be2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <UART_SetConfig+0x300>)
 8005b9e:	617b      	str	r3, [r7, #20]
        break;
 8005ba0:	e01f      	b.n	8005be2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ba2:	f7fd fea9 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8005ba6:	6178      	str	r0, [r7, #20]
        break;
 8005ba8:	e01b      	b.n	8005be2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bae:	617b      	str	r3, [r7, #20]
        break;
 8005bb0:	e017      	b.n	8005be2 <UART_SetConfig+0x30e>
 8005bb2:	bf00      	nop
 8005bb4:	efff69f3 	.word	0xefff69f3
 8005bb8:	40008000 	.word	0x40008000
 8005bbc:	40013800 	.word	0x40013800
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	40004400 	.word	0x40004400
 8005bc8:	40004800 	.word	0x40004800
 8005bcc:	40004c00 	.word	0x40004c00
 8005bd0:	40005000 	.word	0x40005000
 8005bd4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	76bb      	strb	r3, [r7, #26]
        break;
 8005be0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80f1 	beq.w	8005dcc <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	4413      	add	r3, r2
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d305      	bcc.n	8005c06 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d902      	bls.n	8005c0c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	76bb      	strb	r3, [r7, #26]
 8005c0a:	e0df      	b.n	8005dcc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	f04f 0400 	mov.w	r4, #0
 8005c1c:	0214      	lsls	r4, r2, #8
 8005c1e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005c22:	020b      	lsls	r3, r1, #8
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6852      	ldr	r2, [r2, #4]
 8005c28:	0852      	lsrs	r2, r2, #1
 8005c2a:	4611      	mov	r1, r2
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	eb13 0b01 	adds.w	fp, r3, r1
 8005c34:	eb44 0c02 	adc.w	ip, r4, r2
 8005c38:	4658      	mov	r0, fp
 8005c3a:	4661      	mov	r1, ip
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f04f 0400 	mov.w	r4, #0
 8005c44:	461a      	mov	r2, r3
 8005c46:	4623      	mov	r3, r4
 8005c48:	f7fa fabe 	bl	80001c8 <__aeabi_uldivmod>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	460c      	mov	r4, r1
 8005c50:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c58:	d308      	bcc.n	8005c6c <UART_SetConfig+0x398>
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c60:	d204      	bcs.n	8005c6c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	60da      	str	r2, [r3, #12]
 8005c6a:	e0af      	b.n	8005dcc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	76bb      	strb	r3, [r7, #26]
 8005c70:	e0ac      	b.n	8005dcc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c7a:	d15b      	bne.n	8005d34 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005c7c:	7efb      	ldrb	r3, [r7, #27]
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d827      	bhi.n	8005cd2 <UART_SetConfig+0x3fe>
 8005c82:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <UART_SetConfig+0x3b4>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005cad 	.word	0x08005cad
 8005c8c:	08005cb5 	.word	0x08005cb5
 8005c90:	08005cbd 	.word	0x08005cbd
 8005c94:	08005cd3 	.word	0x08005cd3
 8005c98:	08005cc3 	.word	0x08005cc3
 8005c9c:	08005cd3 	.word	0x08005cd3
 8005ca0:	08005cd3 	.word	0x08005cd3
 8005ca4:	08005cd3 	.word	0x08005cd3
 8005ca8:	08005ccb 	.word	0x08005ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cac:	f7fd feba 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 8005cb0:	6178      	str	r0, [r7, #20]
        break;
 8005cb2:	e013      	b.n	8005cdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cb4:	f7fd fecc 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 8005cb8:	6178      	str	r0, [r7, #20]
        break;
 8005cba:	e00f      	b.n	8005cdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cbc:	4b49      	ldr	r3, [pc, #292]	; (8005de4 <UART_SetConfig+0x510>)
 8005cbe:	617b      	str	r3, [r7, #20]
        break;
 8005cc0:	e00c      	b.n	8005cdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cc2:	f7fd fe19 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8005cc6:	6178      	str	r0, [r7, #20]
        break;
 8005cc8:	e008      	b.n	8005cdc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cce:	617b      	str	r3, [r7, #20]
        break;
 8005cd0:	e004      	b.n	8005cdc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	76bb      	strb	r3, [r7, #26]
        break;
 8005cda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d074      	beq.n	8005dcc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	005a      	lsls	r2, r3, #1
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	085b      	lsrs	r3, r3, #1
 8005cec:	441a      	add	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b0f      	cmp	r3, #15
 8005cfe:	d916      	bls.n	8005d2e <UART_SetConfig+0x45a>
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d06:	d212      	bcs.n	8005d2e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	f023 030f 	bic.w	r3, r3, #15
 8005d10:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	085b      	lsrs	r3, r3, #1
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	89fb      	ldrh	r3, [r7, #14]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	89fa      	ldrh	r2, [r7, #14]
 8005d2a:	60da      	str	r2, [r3, #12]
 8005d2c:	e04e      	b.n	8005dcc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	76bb      	strb	r3, [r7, #26]
 8005d32:	e04b      	b.n	8005dcc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d34:	7efb      	ldrb	r3, [r7, #27]
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d827      	bhi.n	8005d8a <UART_SetConfig+0x4b6>
 8005d3a:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <UART_SetConfig+0x46c>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005d65 	.word	0x08005d65
 8005d44:	08005d6d 	.word	0x08005d6d
 8005d48:	08005d75 	.word	0x08005d75
 8005d4c:	08005d8b 	.word	0x08005d8b
 8005d50:	08005d7b 	.word	0x08005d7b
 8005d54:	08005d8b 	.word	0x08005d8b
 8005d58:	08005d8b 	.word	0x08005d8b
 8005d5c:	08005d8b 	.word	0x08005d8b
 8005d60:	08005d83 	.word	0x08005d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d64:	f7fd fe5e 	bl	8003a24 <HAL_RCC_GetPCLK1Freq>
 8005d68:	6178      	str	r0, [r7, #20]
        break;
 8005d6a:	e013      	b.n	8005d94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d6c:	f7fd fe70 	bl	8003a50 <HAL_RCC_GetPCLK2Freq>
 8005d70:	6178      	str	r0, [r7, #20]
        break;
 8005d72:	e00f      	b.n	8005d94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d74:	4b1b      	ldr	r3, [pc, #108]	; (8005de4 <UART_SetConfig+0x510>)
 8005d76:	617b      	str	r3, [r7, #20]
        break;
 8005d78:	e00c      	b.n	8005d94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d7a:	f7fd fdbd 	bl	80038f8 <HAL_RCC_GetSysClockFreq>
 8005d7e:	6178      	str	r0, [r7, #20]
        break;
 8005d80:	e008      	b.n	8005d94 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d86:	617b      	str	r3, [r7, #20]
        break;
 8005d88:	e004      	b.n	8005d94 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	76bb      	strb	r3, [r7, #26]
        break;
 8005d92:	bf00      	nop
    }

    if (pclk != 0U)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d018      	beq.n	8005dcc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	085a      	lsrs	r2, r3, #1
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	441a      	add	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	2b0f      	cmp	r3, #15
 8005db4:	d908      	bls.n	8005dc8 <UART_SetConfig+0x4f4>
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dbc:	d204      	bcs.n	8005dc8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	60da      	str	r2, [r3, #12]
 8005dc6:	e001      	b.n	8005dcc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005dd8:	7ebb      	ldrb	r3, [r7, #26]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005de4:	00f42400 	.word	0x00f42400

08005de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	f003 0310 	and.w	r3, r3, #16
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01a      	beq.n	8005efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ee6:	d10a      	bne.n	8005efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]
  }
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005f3a:	f7fb f919 	bl	8001170 <HAL_GetTick>
 8005f3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b08      	cmp	r3, #8
 8005f4c:	d10e      	bne.n	8005f6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f82a 	bl	8005fb6 <UART_WaitOnFlagUntilTimeout>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e020      	b.n	8005fae <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d10e      	bne.n	8005f98 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f814 	bl	8005fb6 <UART_WaitOnFlagUntilTimeout>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e00a      	b.n	8005fae <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	603b      	str	r3, [r7, #0]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc6:	e05d      	b.n	8006084 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fce:	d059      	beq.n	8006084 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd0:	f7fb f8ce 	bl	8001170 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d302      	bcc.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d11b      	bne.n	800601e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ff4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0201 	bic.w	r2, r2, #1
 8006004:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2220      	movs	r2, #32
 800600a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e042      	b.n	80060a4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	d02b      	beq.n	8006084 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800603a:	d123      	bne.n	8006084 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006044:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006054:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0201 	bic.w	r2, r2, #1
 8006064:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2220      	movs	r2, #32
 800606a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2220      	movs	r2, #32
 8006070:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2220      	movs	r2, #32
 8006076:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e00f      	b.n	80060a4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69da      	ldr	r2, [r3, #28]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4013      	ands	r3, r2
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	429a      	cmp	r2, r3
 8006092:	bf0c      	ite	eq
 8006094:	2301      	moveq	r3, #1
 8006096:	2300      	movne	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d092      	beq.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <__libc_init_array>:
 80060ac:	b570      	push	{r4, r5, r6, lr}
 80060ae:	4e0d      	ldr	r6, [pc, #52]	; (80060e4 <__libc_init_array+0x38>)
 80060b0:	4c0d      	ldr	r4, [pc, #52]	; (80060e8 <__libc_init_array+0x3c>)
 80060b2:	1ba4      	subs	r4, r4, r6
 80060b4:	10a4      	asrs	r4, r4, #2
 80060b6:	2500      	movs	r5, #0
 80060b8:	42a5      	cmp	r5, r4
 80060ba:	d109      	bne.n	80060d0 <__libc_init_array+0x24>
 80060bc:	4e0b      	ldr	r6, [pc, #44]	; (80060ec <__libc_init_array+0x40>)
 80060be:	4c0c      	ldr	r4, [pc, #48]	; (80060f0 <__libc_init_array+0x44>)
 80060c0:	f000 f820 	bl	8006104 <_init>
 80060c4:	1ba4      	subs	r4, r4, r6
 80060c6:	10a4      	asrs	r4, r4, #2
 80060c8:	2500      	movs	r5, #0
 80060ca:	42a5      	cmp	r5, r4
 80060cc:	d105      	bne.n	80060da <__libc_init_array+0x2e>
 80060ce:	bd70      	pop	{r4, r5, r6, pc}
 80060d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060d4:	4798      	blx	r3
 80060d6:	3501      	adds	r5, #1
 80060d8:	e7ee      	b.n	80060b8 <__libc_init_array+0xc>
 80060da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060de:	4798      	blx	r3
 80060e0:	3501      	adds	r5, #1
 80060e2:	e7f2      	b.n	80060ca <__libc_init_array+0x1e>
 80060e4:	0800616c 	.word	0x0800616c
 80060e8:	0800616c 	.word	0x0800616c
 80060ec:	0800616c 	.word	0x0800616c
 80060f0:	08006170 	.word	0x08006170

080060f4 <memset>:
 80060f4:	4402      	add	r2, r0
 80060f6:	4603      	mov	r3, r0
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d100      	bne.n	80060fe <memset+0xa>
 80060fc:	4770      	bx	lr
 80060fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006102:	e7f9      	b.n	80060f8 <memset+0x4>

08006104 <_init>:
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	bf00      	nop
 8006108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610a:	bc08      	pop	{r3}
 800610c:	469e      	mov	lr, r3
 800610e:	4770      	bx	lr

08006110 <_fini>:
 8006110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006112:	bf00      	nop
 8006114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006116:	bc08      	pop	{r3}
 8006118:	469e      	mov	lr, r3
 800611a:	4770      	bx	lr
